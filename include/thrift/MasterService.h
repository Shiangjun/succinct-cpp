/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MasterService_H
#define MasterService_H

#include <thrift/TDispatchProcessor.h>
#include "thrift/succinct_types.h"



class MasterServiceIf {
 public:
  virtual ~MasterServiceIf() {}
  virtual void get_client(std::string& _return) = 0;
  virtual void reconstruct(const int32_t num_hosts) = 0;
};

class MasterServiceIfFactory {
 public:
  typedef MasterServiceIf Handler;

  virtual ~MasterServiceIfFactory() {}

  virtual MasterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MasterServiceIf* /* handler */) = 0;
};

class MasterServiceIfSingletonFactory : virtual public MasterServiceIfFactory {
 public:
  MasterServiceIfSingletonFactory(const boost::shared_ptr<MasterServiceIf>& iface) : iface_(iface) {}
  virtual ~MasterServiceIfSingletonFactory() {}

  virtual MasterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MasterServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MasterServiceIf> iface_;
};

class MasterServiceNull : virtual public MasterServiceIf {
 public:
  virtual ~MasterServiceNull() {}
  void get_client(std::string& /* _return */) {
    return;
  }
  void reconstruct(const int32_t /* num_hosts */) {
    return;
  }
};


class MasterService_get_client_args {
 public:

  MasterService_get_client_args() {
  }

  virtual ~MasterService_get_client_args() throw() {}


  bool operator == (const MasterService_get_client_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MasterService_get_client_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterService_get_client_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterService_get_client_pargs {
 public:


  virtual ~MasterService_get_client_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterService_get_client_result__isset {
  _MasterService_get_client_result__isset() : success(false) {}
  bool success;
} _MasterService_get_client_result__isset;

class MasterService_get_client_result {
 public:

  MasterService_get_client_result() : success() {
  }

  virtual ~MasterService_get_client_result() throw() {}

  std::string success;

  _MasterService_get_client_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MasterService_get_client_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterService_get_client_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterService_get_client_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterService_get_client_presult__isset {
  _MasterService_get_client_presult__isset() : success(false) {}
  bool success;
} _MasterService_get_client_presult__isset;

class MasterService_get_client_presult {
 public:


  virtual ~MasterService_get_client_presult() throw() {}

  std::string* success;

  _MasterService_get_client_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterService_reconstruct_args__isset {
  _MasterService_reconstruct_args__isset() : num_hosts(false) {}
  bool num_hosts;
} _MasterService_reconstruct_args__isset;

class MasterService_reconstruct_args {
 public:

  MasterService_reconstruct_args() : num_hosts(0) {
  }

  virtual ~MasterService_reconstruct_args() throw() {}

  int32_t num_hosts;

  _MasterService_reconstruct_args__isset __isset;

  void __set_num_hosts(const int32_t val) {
    num_hosts = val;
  }

  bool operator == (const MasterService_reconstruct_args & rhs) const
  {
    if (!(num_hosts == rhs.num_hosts))
      return false;
    return true;
  }
  bool operator != (const MasterService_reconstruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterService_reconstruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterService_reconstruct_pargs {
 public:


  virtual ~MasterService_reconstruct_pargs() throw() {}

  const int32_t* num_hosts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterService_reconstruct_result {
 public:

  MasterService_reconstruct_result() {
  }

  virtual ~MasterService_reconstruct_result() throw() {}


  bool operator == (const MasterService_reconstruct_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MasterService_reconstruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterService_reconstruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterService_reconstruct_presult {
 public:


  virtual ~MasterService_reconstruct_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MasterServiceClient : virtual public MasterServiceIf {
 public:
  MasterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MasterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_client(std::string& _return);
  void send_get_client();
  void recv_get_client(std::string& _return);
  void reconstruct(const int32_t num_hosts);
  void send_reconstruct(const int32_t num_hosts);
  void recv_reconstruct();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MasterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MasterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MasterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reconstruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MasterServiceProcessor(boost::shared_ptr<MasterServiceIf> iface) :
    iface_(iface) {
    processMap_["get_client"] = &MasterServiceProcessor::process_get_client;
    processMap_["reconstruct"] = &MasterServiceProcessor::process_reconstruct;
  }

  virtual ~MasterServiceProcessor() {}
};

class MasterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MasterServiceProcessorFactory(const ::boost::shared_ptr< MasterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MasterServiceIfFactory > handlerFactory_;
};

class MasterServiceMultiface : virtual public MasterServiceIf {
 public:
  MasterServiceMultiface(std::vector<boost::shared_ptr<MasterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MasterServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MasterServiceIf> > ifaces_;
  MasterServiceMultiface() {}
  void add(boost::shared_ptr<MasterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_client(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client(_return);
    }
    ifaces_[i]->get_client(_return);
    return;
  }

  void reconstruct(const int32_t num_hosts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reconstruct(num_hosts);
    }
    ifaces_[i]->reconstruct(num_hosts);
  }

};



#endif

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdaptiveSuccinctService_H
#define AdaptiveSuccinctService_H

#include <thrift/TDispatchProcessor.h>
#include "thrift/adaptive_types.h"



class AdaptiveSuccinctServiceIf {
 public:
  virtual ~AdaptiveSuccinctServiceIf() {}
  virtual int32_t connect_to_handlers(const int32_t client_id) = 0;
  virtual int32_t disconnect_from_handlers(const int32_t client_id) = 0;
  virtual int32_t connect_to_local_servers(const int32_t client_id) = 0;
  virtual int32_t disconnect_from_local_servers(const int32_t client_id) = 0;
  virtual int32_t start_servers() = 0;
  virtual int32_t initialize(const int32_t mode) = 0;
  virtual int32_t get_request(const int32_t client_id, const int64_t key) = 0;
  virtual int64_t get_request_local(const int32_t client_id, const int32_t local_shard_id, const int64_t key) = 0;
  virtual void get_response(std::string& _return, const int32_t client_id, const int32_t replica_id) = 0;
  virtual void get_response_local(std::string& _return, const int32_t client_id, const int32_t local_shard_id) = 0;
  virtual int64_t remove_layer(const int32_t shard_id, const int32_t layer_id) = 0;
  virtual int64_t reconstruct_layer(const int32_t shard_id, const int32_t layer_id) = 0;
  virtual int32_t get_num_shards() = 0;
  virtual int32_t get_num_keys(const int32_t shard_id) = 0;
  virtual int64_t get_queue_length(const int32_t shard_id) = 0;
  virtual int64_t storage_size(const int32_t shard_id) = 0;
};

class AdaptiveSuccinctServiceIfFactory {
 public:
  typedef AdaptiveSuccinctServiceIf Handler;

  virtual ~AdaptiveSuccinctServiceIfFactory() {}

  virtual AdaptiveSuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdaptiveSuccinctServiceIf* /* handler */) = 0;
};

class AdaptiveSuccinctServiceIfSingletonFactory : virtual public AdaptiveSuccinctServiceIfFactory {
 public:
  AdaptiveSuccinctServiceIfSingletonFactory(const boost::shared_ptr<AdaptiveSuccinctServiceIf>& iface) : iface_(iface) {}
  virtual ~AdaptiveSuccinctServiceIfSingletonFactory() {}

  virtual AdaptiveSuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdaptiveSuccinctServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdaptiveSuccinctServiceIf> iface_;
};

class AdaptiveSuccinctServiceNull : virtual public AdaptiveSuccinctServiceIf {
 public:
  virtual ~AdaptiveSuccinctServiceNull() {}
  int32_t connect_to_handlers(const int32_t /* client_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t disconnect_from_handlers(const int32_t /* client_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t connect_to_local_servers(const int32_t /* client_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t disconnect_from_local_servers(const int32_t /* client_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t start_servers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t initialize(const int32_t /* mode */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_request(const int32_t /* client_id */, const int64_t /* key */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t get_request_local(const int32_t /* client_id */, const int32_t /* local_shard_id */, const int64_t /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void get_response(std::string& /* _return */, const int32_t /* client_id */, const int32_t /* replica_id */) {
    return;
  }
  void get_response_local(std::string& /* _return */, const int32_t /* client_id */, const int32_t /* local_shard_id */) {
    return;
  }
  int64_t remove_layer(const int32_t /* shard_id */, const int32_t /* layer_id */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t reconstruct_layer(const int32_t /* shard_id */, const int32_t /* layer_id */) {
    int64_t _return = 0;
    return _return;
  }
  int32_t get_num_shards() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_num_keys(const int32_t /* shard_id */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t get_queue_length(const int32_t /* shard_id */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t storage_size(const int32_t /* shard_id */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _AdaptiveSuccinctService_connect_to_handlers_args__isset {
  _AdaptiveSuccinctService_connect_to_handlers_args__isset() : client_id(false) {}
  bool client_id;
} _AdaptiveSuccinctService_connect_to_handlers_args__isset;

class AdaptiveSuccinctService_connect_to_handlers_args {
 public:

  AdaptiveSuccinctService_connect_to_handlers_args() : client_id(0) {
  }

  virtual ~AdaptiveSuccinctService_connect_to_handlers_args() throw() {}

  int32_t client_id;

  _AdaptiveSuccinctService_connect_to_handlers_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_connect_to_handlers_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_connect_to_handlers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_connect_to_handlers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_connect_to_handlers_pargs {
 public:


  virtual ~AdaptiveSuccinctService_connect_to_handlers_pargs() throw() {}

  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_connect_to_handlers_result__isset {
  _AdaptiveSuccinctService_connect_to_handlers_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_connect_to_handlers_result__isset;

class AdaptiveSuccinctService_connect_to_handlers_result {
 public:

  AdaptiveSuccinctService_connect_to_handlers_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_connect_to_handlers_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_connect_to_handlers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_connect_to_handlers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_connect_to_handlers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_connect_to_handlers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_connect_to_handlers_presult__isset {
  _AdaptiveSuccinctService_connect_to_handlers_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_connect_to_handlers_presult__isset;

class AdaptiveSuccinctService_connect_to_handlers_presult {
 public:


  virtual ~AdaptiveSuccinctService_connect_to_handlers_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_connect_to_handlers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_disconnect_from_handlers_args__isset {
  _AdaptiveSuccinctService_disconnect_from_handlers_args__isset() : client_id(false) {}
  bool client_id;
} _AdaptiveSuccinctService_disconnect_from_handlers_args__isset;

class AdaptiveSuccinctService_disconnect_from_handlers_args {
 public:

  AdaptiveSuccinctService_disconnect_from_handlers_args() : client_id(0) {
  }

  virtual ~AdaptiveSuccinctService_disconnect_from_handlers_args() throw() {}

  int32_t client_id;

  _AdaptiveSuccinctService_disconnect_from_handlers_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_disconnect_from_handlers_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_disconnect_from_handlers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_disconnect_from_handlers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_disconnect_from_handlers_pargs {
 public:


  virtual ~AdaptiveSuccinctService_disconnect_from_handlers_pargs() throw() {}

  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_disconnect_from_handlers_result__isset {
  _AdaptiveSuccinctService_disconnect_from_handlers_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_disconnect_from_handlers_result__isset;

class AdaptiveSuccinctService_disconnect_from_handlers_result {
 public:

  AdaptiveSuccinctService_disconnect_from_handlers_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_disconnect_from_handlers_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_disconnect_from_handlers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_disconnect_from_handlers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_disconnect_from_handlers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_disconnect_from_handlers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_disconnect_from_handlers_presult__isset {
  _AdaptiveSuccinctService_disconnect_from_handlers_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_disconnect_from_handlers_presult__isset;

class AdaptiveSuccinctService_disconnect_from_handlers_presult {
 public:


  virtual ~AdaptiveSuccinctService_disconnect_from_handlers_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_disconnect_from_handlers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_connect_to_local_servers_args__isset {
  _AdaptiveSuccinctService_connect_to_local_servers_args__isset() : client_id(false) {}
  bool client_id;
} _AdaptiveSuccinctService_connect_to_local_servers_args__isset;

class AdaptiveSuccinctService_connect_to_local_servers_args {
 public:

  AdaptiveSuccinctService_connect_to_local_servers_args() : client_id(0) {
  }

  virtual ~AdaptiveSuccinctService_connect_to_local_servers_args() throw() {}

  int32_t client_id;

  _AdaptiveSuccinctService_connect_to_local_servers_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_connect_to_local_servers_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_connect_to_local_servers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_connect_to_local_servers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_connect_to_local_servers_pargs {
 public:


  virtual ~AdaptiveSuccinctService_connect_to_local_servers_pargs() throw() {}

  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_connect_to_local_servers_result__isset {
  _AdaptiveSuccinctService_connect_to_local_servers_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_connect_to_local_servers_result__isset;

class AdaptiveSuccinctService_connect_to_local_servers_result {
 public:

  AdaptiveSuccinctService_connect_to_local_servers_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_connect_to_local_servers_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_connect_to_local_servers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_connect_to_local_servers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_connect_to_local_servers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_connect_to_local_servers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_connect_to_local_servers_presult__isset {
  _AdaptiveSuccinctService_connect_to_local_servers_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_connect_to_local_servers_presult__isset;

class AdaptiveSuccinctService_connect_to_local_servers_presult {
 public:


  virtual ~AdaptiveSuccinctService_connect_to_local_servers_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_connect_to_local_servers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_disconnect_from_local_servers_args__isset {
  _AdaptiveSuccinctService_disconnect_from_local_servers_args__isset() : client_id(false) {}
  bool client_id;
} _AdaptiveSuccinctService_disconnect_from_local_servers_args__isset;

class AdaptiveSuccinctService_disconnect_from_local_servers_args {
 public:

  AdaptiveSuccinctService_disconnect_from_local_servers_args() : client_id(0) {
  }

  virtual ~AdaptiveSuccinctService_disconnect_from_local_servers_args() throw() {}

  int32_t client_id;

  _AdaptiveSuccinctService_disconnect_from_local_servers_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_disconnect_from_local_servers_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_disconnect_from_local_servers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_disconnect_from_local_servers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_disconnect_from_local_servers_pargs {
 public:


  virtual ~AdaptiveSuccinctService_disconnect_from_local_servers_pargs() throw() {}

  const int32_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_disconnect_from_local_servers_result__isset {
  _AdaptiveSuccinctService_disconnect_from_local_servers_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_disconnect_from_local_servers_result__isset;

class AdaptiveSuccinctService_disconnect_from_local_servers_result {
 public:

  AdaptiveSuccinctService_disconnect_from_local_servers_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_disconnect_from_local_servers_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_disconnect_from_local_servers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_disconnect_from_local_servers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_disconnect_from_local_servers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_disconnect_from_local_servers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_disconnect_from_local_servers_presult__isset {
  _AdaptiveSuccinctService_disconnect_from_local_servers_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_disconnect_from_local_servers_presult__isset;

class AdaptiveSuccinctService_disconnect_from_local_servers_presult {
 public:


  virtual ~AdaptiveSuccinctService_disconnect_from_local_servers_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_disconnect_from_local_servers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdaptiveSuccinctService_start_servers_args {
 public:

  AdaptiveSuccinctService_start_servers_args() {
  }

  virtual ~AdaptiveSuccinctService_start_servers_args() throw() {}


  bool operator == (const AdaptiveSuccinctService_start_servers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_start_servers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_start_servers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_start_servers_pargs {
 public:


  virtual ~AdaptiveSuccinctService_start_servers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_start_servers_result__isset {
  _AdaptiveSuccinctService_start_servers_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_start_servers_result__isset;

class AdaptiveSuccinctService_start_servers_result {
 public:

  AdaptiveSuccinctService_start_servers_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_start_servers_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_start_servers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_start_servers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_start_servers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_start_servers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_start_servers_presult__isset {
  _AdaptiveSuccinctService_start_servers_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_start_servers_presult__isset;

class AdaptiveSuccinctService_start_servers_presult {
 public:


  virtual ~AdaptiveSuccinctService_start_servers_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_start_servers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_initialize_args__isset {
  _AdaptiveSuccinctService_initialize_args__isset() : mode(false) {}
  bool mode;
} _AdaptiveSuccinctService_initialize_args__isset;

class AdaptiveSuccinctService_initialize_args {
 public:

  AdaptiveSuccinctService_initialize_args() : mode(0) {
  }

  virtual ~AdaptiveSuccinctService_initialize_args() throw() {}

  int32_t mode;

  _AdaptiveSuccinctService_initialize_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  bool operator == (const AdaptiveSuccinctService_initialize_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_initialize_pargs {
 public:


  virtual ~AdaptiveSuccinctService_initialize_pargs() throw() {}

  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_initialize_result__isset {
  _AdaptiveSuccinctService_initialize_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_initialize_result__isset;

class AdaptiveSuccinctService_initialize_result {
 public:

  AdaptiveSuccinctService_initialize_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_initialize_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_initialize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_initialize_presult__isset {
  _AdaptiveSuccinctService_initialize_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_initialize_presult__isset;

class AdaptiveSuccinctService_initialize_presult {
 public:


  virtual ~AdaptiveSuccinctService_initialize_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_request_args__isset {
  _AdaptiveSuccinctService_get_request_args__isset() : client_id(false), key(false) {}
  bool client_id;
  bool key;
} _AdaptiveSuccinctService_get_request_args__isset;

class AdaptiveSuccinctService_get_request_args {
 public:

  AdaptiveSuccinctService_get_request_args() : client_id(0), key(0) {
  }

  virtual ~AdaptiveSuccinctService_get_request_args() throw() {}

  int32_t client_id;
  int64_t key;

  _AdaptiveSuccinctService_get_request_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_request_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_request_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_request_pargs() throw() {}

  const int32_t* client_id;
  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_request_result__isset {
  _AdaptiveSuccinctService_get_request_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_request_result__isset;

class AdaptiveSuccinctService_get_request_result {
 public:

  AdaptiveSuccinctService_get_request_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_get_request_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_get_request_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_request_presult__isset {
  _AdaptiveSuccinctService_get_request_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_request_presult__isset;

class AdaptiveSuccinctService_get_request_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_request_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_get_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_request_local_args__isset {
  _AdaptiveSuccinctService_get_request_local_args__isset() : client_id(false), local_shard_id(false), key(false) {}
  bool client_id;
  bool local_shard_id;
  bool key;
} _AdaptiveSuccinctService_get_request_local_args__isset;

class AdaptiveSuccinctService_get_request_local_args {
 public:

  AdaptiveSuccinctService_get_request_local_args() : client_id(0), local_shard_id(0), key(0) {
  }

  virtual ~AdaptiveSuccinctService_get_request_local_args() throw() {}

  int32_t client_id;
  int32_t local_shard_id;
  int64_t key;

  _AdaptiveSuccinctService_get_request_local_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  void __set_local_shard_id(const int32_t val) {
    local_shard_id = val;
  }

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_request_local_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(local_shard_id == rhs.local_shard_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_request_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_request_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_request_local_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_request_local_pargs() throw() {}

  const int32_t* client_id;
  const int32_t* local_shard_id;
  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_request_local_result__isset {
  _AdaptiveSuccinctService_get_request_local_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_request_local_result__isset;

class AdaptiveSuccinctService_get_request_local_result {
 public:

  AdaptiveSuccinctService_get_request_local_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_get_request_local_result() throw() {}

  int64_t success;

  _AdaptiveSuccinctService_get_request_local_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_request_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_request_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_request_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_request_local_presult__isset {
  _AdaptiveSuccinctService_get_request_local_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_request_local_presult__isset;

class AdaptiveSuccinctService_get_request_local_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_request_local_presult() throw() {}

  int64_t* success;

  _AdaptiveSuccinctService_get_request_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_response_args__isset {
  _AdaptiveSuccinctService_get_response_args__isset() : client_id(false), replica_id(false) {}
  bool client_id;
  bool replica_id;
} _AdaptiveSuccinctService_get_response_args__isset;

class AdaptiveSuccinctService_get_response_args {
 public:

  AdaptiveSuccinctService_get_response_args() : client_id(0), replica_id(0) {
  }

  virtual ~AdaptiveSuccinctService_get_response_args() throw() {}

  int32_t client_id;
  int32_t replica_id;

  _AdaptiveSuccinctService_get_response_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  void __set_replica_id(const int32_t val) {
    replica_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_response_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(replica_id == rhs.replica_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_response_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_response_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_response_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_response_pargs() throw() {}

  const int32_t* client_id;
  const int32_t* replica_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_response_result__isset {
  _AdaptiveSuccinctService_get_response_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_response_result__isset;

class AdaptiveSuccinctService_get_response_result {
 public:

  AdaptiveSuccinctService_get_response_result() : success() {
  }

  virtual ~AdaptiveSuccinctService_get_response_result() throw() {}

  std::string success;

  _AdaptiveSuccinctService_get_response_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_response_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_response_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_response_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_response_presult__isset {
  _AdaptiveSuccinctService_get_response_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_response_presult__isset;

class AdaptiveSuccinctService_get_response_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_response_presult() throw() {}

  std::string* success;

  _AdaptiveSuccinctService_get_response_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_response_local_args__isset {
  _AdaptiveSuccinctService_get_response_local_args__isset() : client_id(false), local_shard_id(false) {}
  bool client_id;
  bool local_shard_id;
} _AdaptiveSuccinctService_get_response_local_args__isset;

class AdaptiveSuccinctService_get_response_local_args {
 public:

  AdaptiveSuccinctService_get_response_local_args() : client_id(0), local_shard_id(0) {
  }

  virtual ~AdaptiveSuccinctService_get_response_local_args() throw() {}

  int32_t client_id;
  int32_t local_shard_id;

  _AdaptiveSuccinctService_get_response_local_args__isset __isset;

  void __set_client_id(const int32_t val) {
    client_id = val;
  }

  void __set_local_shard_id(const int32_t val) {
    local_shard_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_response_local_args & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(local_shard_id == rhs.local_shard_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_response_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_response_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_response_local_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_response_local_pargs() throw() {}

  const int32_t* client_id;
  const int32_t* local_shard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_response_local_result__isset {
  _AdaptiveSuccinctService_get_response_local_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_response_local_result__isset;

class AdaptiveSuccinctService_get_response_local_result {
 public:

  AdaptiveSuccinctService_get_response_local_result() : success() {
  }

  virtual ~AdaptiveSuccinctService_get_response_local_result() throw() {}

  std::string success;

  _AdaptiveSuccinctService_get_response_local_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_response_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_response_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_response_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_response_local_presult__isset {
  _AdaptiveSuccinctService_get_response_local_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_response_local_presult__isset;

class AdaptiveSuccinctService_get_response_local_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_response_local_presult() throw() {}

  std::string* success;

  _AdaptiveSuccinctService_get_response_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_remove_layer_args__isset {
  _AdaptiveSuccinctService_remove_layer_args__isset() : shard_id(false), layer_id(false) {}
  bool shard_id;
  bool layer_id;
} _AdaptiveSuccinctService_remove_layer_args__isset;

class AdaptiveSuccinctService_remove_layer_args {
 public:

  AdaptiveSuccinctService_remove_layer_args() : shard_id(0), layer_id(0) {
  }

  virtual ~AdaptiveSuccinctService_remove_layer_args() throw() {}

  int32_t shard_id;
  int32_t layer_id;

  _AdaptiveSuccinctService_remove_layer_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  void __set_layer_id(const int32_t val) {
    layer_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_remove_layer_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(layer_id == rhs.layer_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_remove_layer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_remove_layer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_remove_layer_pargs {
 public:


  virtual ~AdaptiveSuccinctService_remove_layer_pargs() throw() {}

  const int32_t* shard_id;
  const int32_t* layer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_remove_layer_result__isset {
  _AdaptiveSuccinctService_remove_layer_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_remove_layer_result__isset;

class AdaptiveSuccinctService_remove_layer_result {
 public:

  AdaptiveSuccinctService_remove_layer_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_remove_layer_result() throw() {}

  int64_t success;

  _AdaptiveSuccinctService_remove_layer_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_remove_layer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_remove_layer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_remove_layer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_remove_layer_presult__isset {
  _AdaptiveSuccinctService_remove_layer_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_remove_layer_presult__isset;

class AdaptiveSuccinctService_remove_layer_presult {
 public:


  virtual ~AdaptiveSuccinctService_remove_layer_presult() throw() {}

  int64_t* success;

  _AdaptiveSuccinctService_remove_layer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_reconstruct_layer_args__isset {
  _AdaptiveSuccinctService_reconstruct_layer_args__isset() : shard_id(false), layer_id(false) {}
  bool shard_id;
  bool layer_id;
} _AdaptiveSuccinctService_reconstruct_layer_args__isset;

class AdaptiveSuccinctService_reconstruct_layer_args {
 public:

  AdaptiveSuccinctService_reconstruct_layer_args() : shard_id(0), layer_id(0) {
  }

  virtual ~AdaptiveSuccinctService_reconstruct_layer_args() throw() {}

  int32_t shard_id;
  int32_t layer_id;

  _AdaptiveSuccinctService_reconstruct_layer_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  void __set_layer_id(const int32_t val) {
    layer_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_reconstruct_layer_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(layer_id == rhs.layer_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_reconstruct_layer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_reconstruct_layer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_reconstruct_layer_pargs {
 public:


  virtual ~AdaptiveSuccinctService_reconstruct_layer_pargs() throw() {}

  const int32_t* shard_id;
  const int32_t* layer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_reconstruct_layer_result__isset {
  _AdaptiveSuccinctService_reconstruct_layer_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_reconstruct_layer_result__isset;

class AdaptiveSuccinctService_reconstruct_layer_result {
 public:

  AdaptiveSuccinctService_reconstruct_layer_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_reconstruct_layer_result() throw() {}

  int64_t success;

  _AdaptiveSuccinctService_reconstruct_layer_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_reconstruct_layer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_reconstruct_layer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_reconstruct_layer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_reconstruct_layer_presult__isset {
  _AdaptiveSuccinctService_reconstruct_layer_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_reconstruct_layer_presult__isset;

class AdaptiveSuccinctService_reconstruct_layer_presult {
 public:


  virtual ~AdaptiveSuccinctService_reconstruct_layer_presult() throw() {}

  int64_t* success;

  _AdaptiveSuccinctService_reconstruct_layer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdaptiveSuccinctService_get_num_shards_args {
 public:

  AdaptiveSuccinctService_get_num_shards_args() {
  }

  virtual ~AdaptiveSuccinctService_get_num_shards_args() throw() {}


  bool operator == (const AdaptiveSuccinctService_get_num_shards_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_num_shards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_num_shards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_num_shards_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_num_shards_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_num_shards_result__isset {
  _AdaptiveSuccinctService_get_num_shards_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_num_shards_result__isset;

class AdaptiveSuccinctService_get_num_shards_result {
 public:

  AdaptiveSuccinctService_get_num_shards_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_get_num_shards_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_get_num_shards_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_num_shards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_num_shards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_num_shards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_num_shards_presult__isset {
  _AdaptiveSuccinctService_get_num_shards_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_num_shards_presult__isset;

class AdaptiveSuccinctService_get_num_shards_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_num_shards_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_get_num_shards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_num_keys_args__isset {
  _AdaptiveSuccinctService_get_num_keys_args__isset() : shard_id(false) {}
  bool shard_id;
} _AdaptiveSuccinctService_get_num_keys_args__isset;

class AdaptiveSuccinctService_get_num_keys_args {
 public:

  AdaptiveSuccinctService_get_num_keys_args() : shard_id(0) {
  }

  virtual ~AdaptiveSuccinctService_get_num_keys_args() throw() {}

  int32_t shard_id;

  _AdaptiveSuccinctService_get_num_keys_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_num_keys_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_num_keys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_num_keys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_num_keys_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_num_keys_pargs() throw() {}

  const int32_t* shard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_num_keys_result__isset {
  _AdaptiveSuccinctService_get_num_keys_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_num_keys_result__isset;

class AdaptiveSuccinctService_get_num_keys_result {
 public:

  AdaptiveSuccinctService_get_num_keys_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_get_num_keys_result() throw() {}

  int32_t success;

  _AdaptiveSuccinctService_get_num_keys_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_num_keys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_num_keys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_num_keys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_num_keys_presult__isset {
  _AdaptiveSuccinctService_get_num_keys_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_num_keys_presult__isset;

class AdaptiveSuccinctService_get_num_keys_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_num_keys_presult() throw() {}

  int32_t* success;

  _AdaptiveSuccinctService_get_num_keys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_get_queue_length_args__isset {
  _AdaptiveSuccinctService_get_queue_length_args__isset() : shard_id(false) {}
  bool shard_id;
} _AdaptiveSuccinctService_get_queue_length_args__isset;

class AdaptiveSuccinctService_get_queue_length_args {
 public:

  AdaptiveSuccinctService_get_queue_length_args() : shard_id(0) {
  }

  virtual ~AdaptiveSuccinctService_get_queue_length_args() throw() {}

  int32_t shard_id;

  _AdaptiveSuccinctService_get_queue_length_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_queue_length_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_queue_length_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_queue_length_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_get_queue_length_pargs {
 public:


  virtual ~AdaptiveSuccinctService_get_queue_length_pargs() throw() {}

  const int32_t* shard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_queue_length_result__isset {
  _AdaptiveSuccinctService_get_queue_length_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_queue_length_result__isset;

class AdaptiveSuccinctService_get_queue_length_result {
 public:

  AdaptiveSuccinctService_get_queue_length_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_get_queue_length_result() throw() {}

  int64_t success;

  _AdaptiveSuccinctService_get_queue_length_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_get_queue_length_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_get_queue_length_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_get_queue_length_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_get_queue_length_presult__isset {
  _AdaptiveSuccinctService_get_queue_length_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_get_queue_length_presult__isset;

class AdaptiveSuccinctService_get_queue_length_presult {
 public:


  virtual ~AdaptiveSuccinctService_get_queue_length_presult() throw() {}

  int64_t* success;

  _AdaptiveSuccinctService_get_queue_length_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveSuccinctService_storage_size_args__isset {
  _AdaptiveSuccinctService_storage_size_args__isset() : shard_id(false) {}
  bool shard_id;
} _AdaptiveSuccinctService_storage_size_args__isset;

class AdaptiveSuccinctService_storage_size_args {
 public:

  AdaptiveSuccinctService_storage_size_args() : shard_id(0) {
  }

  virtual ~AdaptiveSuccinctService_storage_size_args() throw() {}

  int32_t shard_id;

  _AdaptiveSuccinctService_storage_size_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  bool operator == (const AdaptiveSuccinctService_storage_size_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_storage_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_storage_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveSuccinctService_storage_size_pargs {
 public:


  virtual ~AdaptiveSuccinctService_storage_size_pargs() throw() {}

  const int32_t* shard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_storage_size_result__isset {
  _AdaptiveSuccinctService_storage_size_result__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_storage_size_result__isset;

class AdaptiveSuccinctService_storage_size_result {
 public:

  AdaptiveSuccinctService_storage_size_result() : success(0) {
  }

  virtual ~AdaptiveSuccinctService_storage_size_result() throw() {}

  int64_t success;

  _AdaptiveSuccinctService_storage_size_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveSuccinctService_storage_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveSuccinctService_storage_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveSuccinctService_storage_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveSuccinctService_storage_size_presult__isset {
  _AdaptiveSuccinctService_storage_size_presult__isset() : success(false) {}
  bool success;
} _AdaptiveSuccinctService_storage_size_presult__isset;

class AdaptiveSuccinctService_storage_size_presult {
 public:


  virtual ~AdaptiveSuccinctService_storage_size_presult() throw() {}

  int64_t* success;

  _AdaptiveSuccinctService_storage_size_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdaptiveSuccinctServiceClient : virtual public AdaptiveSuccinctServiceIf {
 public:
  AdaptiveSuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AdaptiveSuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t connect_to_handlers(const int32_t client_id);
  void send_connect_to_handlers(const int32_t client_id);
  int32_t recv_connect_to_handlers();
  int32_t disconnect_from_handlers(const int32_t client_id);
  void send_disconnect_from_handlers(const int32_t client_id);
  int32_t recv_disconnect_from_handlers();
  int32_t connect_to_local_servers(const int32_t client_id);
  void send_connect_to_local_servers(const int32_t client_id);
  int32_t recv_connect_to_local_servers();
  int32_t disconnect_from_local_servers(const int32_t client_id);
  void send_disconnect_from_local_servers(const int32_t client_id);
  int32_t recv_disconnect_from_local_servers();
  int32_t start_servers();
  void send_start_servers();
  int32_t recv_start_servers();
  int32_t initialize(const int32_t mode);
  void send_initialize(const int32_t mode);
  int32_t recv_initialize();
  int32_t get_request(const int32_t client_id, const int64_t key);
  void send_get_request(const int32_t client_id, const int64_t key);
  int32_t recv_get_request();
  int64_t get_request_local(const int32_t client_id, const int32_t local_shard_id, const int64_t key);
  void send_get_request_local(const int32_t client_id, const int32_t local_shard_id, const int64_t key);
  int64_t recv_get_request_local();
  void get_response(std::string& _return, const int32_t client_id, const int32_t replica_id);
  void send_get_response(const int32_t client_id, const int32_t replica_id);
  void recv_get_response(std::string& _return);
  void get_response_local(std::string& _return, const int32_t client_id, const int32_t local_shard_id);
  void send_get_response_local(const int32_t client_id, const int32_t local_shard_id);
  void recv_get_response_local(std::string& _return);
  int64_t remove_layer(const int32_t shard_id, const int32_t layer_id);
  void send_remove_layer(const int32_t shard_id, const int32_t layer_id);
  int64_t recv_remove_layer();
  int64_t reconstruct_layer(const int32_t shard_id, const int32_t layer_id);
  void send_reconstruct_layer(const int32_t shard_id, const int32_t layer_id);
  int64_t recv_reconstruct_layer();
  int32_t get_num_shards();
  void send_get_num_shards();
  int32_t recv_get_num_shards();
  int32_t get_num_keys(const int32_t shard_id);
  void send_get_num_keys(const int32_t shard_id);
  int32_t recv_get_num_keys();
  int64_t get_queue_length(const int32_t shard_id);
  void send_get_queue_length(const int32_t shard_id);
  int64_t recv_get_queue_length();
  int64_t storage_size(const int32_t shard_id);
  void send_storage_size(const int32_t shard_id);
  int64_t recv_storage_size();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdaptiveSuccinctServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdaptiveSuccinctServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdaptiveSuccinctServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect_to_handlers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect_from_handlers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect_to_local_servers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect_from_local_servers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_servers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_request_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_response_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_layer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reconstruct_layer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_num_shards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_num_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_queue_length(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storage_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdaptiveSuccinctServiceProcessor(boost::shared_ptr<AdaptiveSuccinctServiceIf> iface) :
    iface_(iface) {
    processMap_["connect_to_handlers"] = &AdaptiveSuccinctServiceProcessor::process_connect_to_handlers;
    processMap_["disconnect_from_handlers"] = &AdaptiveSuccinctServiceProcessor::process_disconnect_from_handlers;
    processMap_["connect_to_local_servers"] = &AdaptiveSuccinctServiceProcessor::process_connect_to_local_servers;
    processMap_["disconnect_from_local_servers"] = &AdaptiveSuccinctServiceProcessor::process_disconnect_from_local_servers;
    processMap_["start_servers"] = &AdaptiveSuccinctServiceProcessor::process_start_servers;
    processMap_["initialize"] = &AdaptiveSuccinctServiceProcessor::process_initialize;
    processMap_["get_request"] = &AdaptiveSuccinctServiceProcessor::process_get_request;
    processMap_["get_request_local"] = &AdaptiveSuccinctServiceProcessor::process_get_request_local;
    processMap_["get_response"] = &AdaptiveSuccinctServiceProcessor::process_get_response;
    processMap_["get_response_local"] = &AdaptiveSuccinctServiceProcessor::process_get_response_local;
    processMap_["remove_layer"] = &AdaptiveSuccinctServiceProcessor::process_remove_layer;
    processMap_["reconstruct_layer"] = &AdaptiveSuccinctServiceProcessor::process_reconstruct_layer;
    processMap_["get_num_shards"] = &AdaptiveSuccinctServiceProcessor::process_get_num_shards;
    processMap_["get_num_keys"] = &AdaptiveSuccinctServiceProcessor::process_get_num_keys;
    processMap_["get_queue_length"] = &AdaptiveSuccinctServiceProcessor::process_get_queue_length;
    processMap_["storage_size"] = &AdaptiveSuccinctServiceProcessor::process_storage_size;
  }

  virtual ~AdaptiveSuccinctServiceProcessor() {}
};

class AdaptiveSuccinctServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdaptiveSuccinctServiceProcessorFactory(const ::boost::shared_ptr< AdaptiveSuccinctServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdaptiveSuccinctServiceIfFactory > handlerFactory_;
};

class AdaptiveSuccinctServiceMultiface : virtual public AdaptiveSuccinctServiceIf {
 public:
  AdaptiveSuccinctServiceMultiface(std::vector<boost::shared_ptr<AdaptiveSuccinctServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdaptiveSuccinctServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdaptiveSuccinctServiceIf> > ifaces_;
  AdaptiveSuccinctServiceMultiface() {}
  void add(boost::shared_ptr<AdaptiveSuccinctServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t connect_to_handlers(const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect_to_handlers(client_id);
    }
    return ifaces_[i]->connect_to_handlers(client_id);
  }

  int32_t disconnect_from_handlers(const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect_from_handlers(client_id);
    }
    return ifaces_[i]->disconnect_from_handlers(client_id);
  }

  int32_t connect_to_local_servers(const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect_to_local_servers(client_id);
    }
    return ifaces_[i]->connect_to_local_servers(client_id);
  }

  int32_t disconnect_from_local_servers(const int32_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect_from_local_servers(client_id);
    }
    return ifaces_[i]->disconnect_from_local_servers(client_id);
  }

  int32_t start_servers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_servers();
    }
    return ifaces_[i]->start_servers();
  }

  int32_t initialize(const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initialize(mode);
    }
    return ifaces_[i]->initialize(mode);
  }

  int32_t get_request(const int32_t client_id, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_request(client_id, key);
    }
    return ifaces_[i]->get_request(client_id, key);
  }

  int64_t get_request_local(const int32_t client_id, const int32_t local_shard_id, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_request_local(client_id, local_shard_id, key);
    }
    return ifaces_[i]->get_request_local(client_id, local_shard_id, key);
  }

  void get_response(std::string& _return, const int32_t client_id, const int32_t replica_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_response(_return, client_id, replica_id);
    }
    ifaces_[i]->get_response(_return, client_id, replica_id);
    return;
  }

  void get_response_local(std::string& _return, const int32_t client_id, const int32_t local_shard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_response_local(_return, client_id, local_shard_id);
    }
    ifaces_[i]->get_response_local(_return, client_id, local_shard_id);
    return;
  }

  int64_t remove_layer(const int32_t shard_id, const int32_t layer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_layer(shard_id, layer_id);
    }
    return ifaces_[i]->remove_layer(shard_id, layer_id);
  }

  int64_t reconstruct_layer(const int32_t shard_id, const int32_t layer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reconstruct_layer(shard_id, layer_id);
    }
    return ifaces_[i]->reconstruct_layer(shard_id, layer_id);
  }

  int32_t get_num_shards() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_num_shards();
    }
    return ifaces_[i]->get_num_shards();
  }

  int32_t get_num_keys(const int32_t shard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_num_keys(shard_id);
    }
    return ifaces_[i]->get_num_keys(shard_id);
  }

  int64_t get_queue_length(const int32_t shard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_queue_length(shard_id);
    }
    return ifaces_[i]->get_queue_length(shard_id);
  }

  int64_t storage_size(const int32_t shard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storage_size(shard_id);
    }
    return ifaces_[i]->storage_size(shard_id);
  }

};



#endif

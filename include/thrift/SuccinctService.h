/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SuccinctService_H
#define SuccinctService_H

#include <thrift/TDispatchProcessor.h>
#include "thrift/succinct_types.h"



class SuccinctServiceIf {
 public:
  virtual ~SuccinctServiceIf() {}
  virtual void extract(std::string& _return, const int64_t offset, const int64_t len) = 0;
  virtual int64_t count(const std::string& query) = 0;
  virtual void search(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual void wildcard_search(std::vector<int64_t> & _return, const std::string& pattern, const int64_t max_sep) = 0;
};

class SuccinctServiceIfFactory {
 public:
  typedef SuccinctServiceIf Handler;

  virtual ~SuccinctServiceIfFactory() {}

  virtual SuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SuccinctServiceIf* /* handler */) = 0;
};

class SuccinctServiceIfSingletonFactory : virtual public SuccinctServiceIfFactory {
 public:
  SuccinctServiceIfSingletonFactory(const boost::shared_ptr<SuccinctServiceIf>& iface) : iface_(iface) {}
  virtual ~SuccinctServiceIfSingletonFactory() {}

  virtual SuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SuccinctServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SuccinctServiceIf> iface_;
};

class SuccinctServiceNull : virtual public SuccinctServiceIf {
 public:
  virtual ~SuccinctServiceNull() {}
  void extract(std::string& /* _return */, const int64_t /* offset */, const int64_t /* len */) {
    return;
  }
  int64_t count(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void search(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void wildcard_search(std::vector<int64_t> & /* _return */, const std::string& /* pattern */, const int64_t /* max_sep */) {
    return;
  }
};

typedef struct _SuccinctService_extract_args__isset {
  _SuccinctService_extract_args__isset() : offset(false), len(false) {}
  bool offset;
  bool len;
} _SuccinctService_extract_args__isset;

class SuccinctService_extract_args {
 public:

  SuccinctService_extract_args() : offset(0), len(0) {
  }

  virtual ~SuccinctService_extract_args() throw() {}

  int64_t offset;
  int64_t len;

  _SuccinctService_extract_args__isset __isset;

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_len(const int64_t val) {
    len = val;
  }

  bool operator == (const SuccinctService_extract_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_extract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_extract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_extract_pargs {
 public:


  virtual ~SuccinctService_extract_pargs() throw() {}

  const int64_t* offset;
  const int64_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_extract_result__isset {
  _SuccinctService_extract_result__isset() : success(false) {}
  bool success;
} _SuccinctService_extract_result__isset;

class SuccinctService_extract_result {
 public:

  SuccinctService_extract_result() : success() {
  }

  virtual ~SuccinctService_extract_result() throw() {}

  std::string success;

  _SuccinctService_extract_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_extract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_extract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_extract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_extract_presult__isset {
  _SuccinctService_extract_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_extract_presult__isset;

class SuccinctService_extract_presult {
 public:


  virtual ~SuccinctService_extract_presult() throw() {}

  std::string* success;

  _SuccinctService_extract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_count_args__isset {
  _SuccinctService_count_args__isset() : query(false) {}
  bool query;
} _SuccinctService_count_args__isset;

class SuccinctService_count_args {
 public:

  SuccinctService_count_args() : query() {
  }

  virtual ~SuccinctService_count_args() throw() {}

  std::string query;

  _SuccinctService_count_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_count_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_count_pargs {
 public:


  virtual ~SuccinctService_count_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_count_result__isset {
  _SuccinctService_count_result__isset() : success(false) {}
  bool success;
} _SuccinctService_count_result__isset;

class SuccinctService_count_result {
 public:

  SuccinctService_count_result() : success(0) {
  }

  virtual ~SuccinctService_count_result() throw() {}

  int64_t success;

  _SuccinctService_count_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_count_presult__isset {
  _SuccinctService_count_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_count_presult__isset;

class SuccinctService_count_presult {
 public:


  virtual ~SuccinctService_count_presult() throw() {}

  int64_t* success;

  _SuccinctService_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_search_args__isset {
  _SuccinctService_search_args__isset() : query(false) {}
  bool query;
} _SuccinctService_search_args__isset;

class SuccinctService_search_args {
 public:

  SuccinctService_search_args() : query() {
  }

  virtual ~SuccinctService_search_args() throw() {}

  std::string query;

  _SuccinctService_search_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_search_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_search_pargs {
 public:


  virtual ~SuccinctService_search_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_search_result__isset {
  _SuccinctService_search_result__isset() : success(false) {}
  bool success;
} _SuccinctService_search_result__isset;

class SuccinctService_search_result {
 public:

  SuccinctService_search_result() {
  }

  virtual ~SuccinctService_search_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_search_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_search_presult__isset {
  _SuccinctService_search_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_search_presult__isset;

class SuccinctService_search_presult {
 public:


  virtual ~SuccinctService_search_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_wildcard_search_args__isset {
  _SuccinctService_wildcard_search_args__isset() : pattern(false), max_sep(false) {}
  bool pattern;
  bool max_sep;
} _SuccinctService_wildcard_search_args__isset;

class SuccinctService_wildcard_search_args {
 public:

  SuccinctService_wildcard_search_args() : pattern(), max_sep(0) {
  }

  virtual ~SuccinctService_wildcard_search_args() throw() {}

  std::string pattern;
  int64_t max_sep;

  _SuccinctService_wildcard_search_args__isset __isset;

  void __set_pattern(const std::string& val) {
    pattern = val;
  }

  void __set_max_sep(const int64_t val) {
    max_sep = val;
  }

  bool operator == (const SuccinctService_wildcard_search_args & rhs) const
  {
    if (!(pattern == rhs.pattern))
      return false;
    if (!(max_sep == rhs.max_sep))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_wildcard_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_wildcard_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_wildcard_search_pargs {
 public:


  virtual ~SuccinctService_wildcard_search_pargs() throw() {}

  const std::string* pattern;
  const int64_t* max_sep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_wildcard_search_result__isset {
  _SuccinctService_wildcard_search_result__isset() : success(false) {}
  bool success;
} _SuccinctService_wildcard_search_result__isset;

class SuccinctService_wildcard_search_result {
 public:

  SuccinctService_wildcard_search_result() {
  }

  virtual ~SuccinctService_wildcard_search_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_wildcard_search_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_wildcard_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_wildcard_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_wildcard_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_wildcard_search_presult__isset {
  _SuccinctService_wildcard_search_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_wildcard_search_presult__isset;

class SuccinctService_wildcard_search_presult {
 public:


  virtual ~SuccinctService_wildcard_search_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_wildcard_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SuccinctServiceClient : virtual public SuccinctServiceIf {
 public:
  SuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void extract(std::string& _return, const int64_t offset, const int64_t len);
  void send_extract(const int64_t offset, const int64_t len);
  void recv_extract(std::string& _return);
  int64_t count(const std::string& query);
  void send_count(const std::string& query);
  int64_t recv_count();
  void search(std::vector<int64_t> & _return, const std::string& query);
  void send_search(const std::string& query);
  void recv_search(std::vector<int64_t> & _return);
  void wildcard_search(std::vector<int64_t> & _return, const std::string& pattern, const int64_t max_sep);
  void send_wildcard_search(const std::string& pattern, const int64_t max_sep);
  void recv_wildcard_search(std::vector<int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SuccinctServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SuccinctServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SuccinctServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_extract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_wildcard_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SuccinctServiceProcessor(boost::shared_ptr<SuccinctServiceIf> iface) :
    iface_(iface) {
    processMap_["extract"] = &SuccinctServiceProcessor::process_extract;
    processMap_["count"] = &SuccinctServiceProcessor::process_count;
    processMap_["search"] = &SuccinctServiceProcessor::process_search;
    processMap_["wildcard_search"] = &SuccinctServiceProcessor::process_wildcard_search;
  }

  virtual ~SuccinctServiceProcessor() {}
};

class SuccinctServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SuccinctServiceProcessorFactory(const ::boost::shared_ptr< SuccinctServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SuccinctServiceIfFactory > handlerFactory_;
};

class SuccinctServiceMultiface : virtual public SuccinctServiceIf {
 public:
  SuccinctServiceMultiface(std::vector<boost::shared_ptr<SuccinctServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SuccinctServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SuccinctServiceIf> > ifaces_;
  SuccinctServiceMultiface() {}
  void add(boost::shared_ptr<SuccinctServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void extract(std::string& _return, const int64_t offset, const int64_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->extract(_return, offset, len);
    }
    ifaces_[i]->extract(_return, offset, len);
    return;
  }

  int64_t count(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count(query);
    }
    return ifaces_[i]->count(query);
  }

  void search(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, query);
    }
    ifaces_[i]->search(_return, query);
    return;
  }

  void wildcard_search(std::vector<int64_t> & _return, const std::string& pattern, const int64_t max_sep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->wildcard_search(_return, pattern, max_sep);
    }
    ifaces_[i]->wildcard_search(_return, pattern, max_sep);
    return;
  }

};



#endif

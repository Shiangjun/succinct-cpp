/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QueryServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual int32_t Initialize(const int32_t id) = 0;
  virtual void Get(std::string& _return, const int64_t key) = 0;
  virtual void Extract(std::string& _return, const int64_t key, const int32_t offset, const int32_t length) = 0;
  virtual void Search(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual int64_t Count(const std::string& query) = 0;
  virtual void RegexSearch(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual int32_t GetNumKeys() = 0;
  virtual int64_t GetShardSize() = 0;
  virtual void Ping(ServerHeartBeat& _return) = 0;
};

class QueryServiceIfFactory {
 public:
  typedef QueryServiceIf Handler;

  virtual ~QueryServiceIfFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QueryServiceIf* /* handler */) = 0;
};

class QueryServiceIfSingletonFactory : virtual public QueryServiceIfFactory {
 public:
  QueryServiceIfSingletonFactory(const boost::shared_ptr<QueryServiceIf>& iface) : iface_(iface) {}
  virtual ~QueryServiceIfSingletonFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
};

class QueryServiceNull : virtual public QueryServiceIf {
 public:
  virtual ~QueryServiceNull() {}
  int32_t Initialize(const int32_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  void Get(std::string& /* _return */, const int64_t /* key */) {
    return;
  }
  void Extract(std::string& /* _return */, const int64_t /* key */, const int32_t /* offset */, const int32_t /* length */) {
    return;
  }
  void Search(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  int64_t Count(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void RegexSearch(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  int32_t GetNumKeys() {
    int32_t _return = 0;
    return _return;
  }
  int64_t GetShardSize() {
    int64_t _return = 0;
    return _return;
  }
  void Ping(ServerHeartBeat& /* _return */) {
    return;
  }
};

typedef struct _QueryService_Initialize_args__isset {
  _QueryService_Initialize_args__isset() : id(false) {}
  bool id :1;
} _QueryService_Initialize_args__isset;

class QueryService_Initialize_args {
 public:

  QueryService_Initialize_args(const QueryService_Initialize_args&);
  QueryService_Initialize_args& operator=(const QueryService_Initialize_args&);
  QueryService_Initialize_args() : id(0) {
  }

  virtual ~QueryService_Initialize_args() throw();
  int32_t id;

  _QueryService_Initialize_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const QueryService_Initialize_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const QueryService_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Initialize_pargs {
 public:


  virtual ~QueryService_Initialize_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Initialize_result__isset {
  _QueryService_Initialize_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Initialize_result__isset;

class QueryService_Initialize_result {
 public:

  QueryService_Initialize_result(const QueryService_Initialize_result&);
  QueryService_Initialize_result& operator=(const QueryService_Initialize_result&);
  QueryService_Initialize_result() : success(0) {
  }

  virtual ~QueryService_Initialize_result() throw();
  int32_t success;

  _QueryService_Initialize_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const QueryService_Initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Initialize_presult__isset {
  _QueryService_Initialize_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Initialize_presult__isset;

class QueryService_Initialize_presult {
 public:


  virtual ~QueryService_Initialize_presult() throw();
  int32_t* success;

  _QueryService_Initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_Get_args__isset {
  _QueryService_Get_args__isset() : key(false) {}
  bool key :1;
} _QueryService_Get_args__isset;

class QueryService_Get_args {
 public:

  QueryService_Get_args(const QueryService_Get_args&);
  QueryService_Get_args& operator=(const QueryService_Get_args&);
  QueryService_Get_args() : key(0) {
  }

  virtual ~QueryService_Get_args() throw();
  int64_t key;

  _QueryService_Get_args__isset __isset;

  void __set_key(const int64_t val);

  bool operator == (const QueryService_Get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const QueryService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Get_pargs {
 public:


  virtual ~QueryService_Get_pargs() throw();
  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Get_result__isset {
  _QueryService_Get_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Get_result__isset;

class QueryService_Get_result {
 public:

  QueryService_Get_result(const QueryService_Get_result&);
  QueryService_Get_result& operator=(const QueryService_Get_result&);
  QueryService_Get_result() : success() {
  }

  virtual ~QueryService_Get_result() throw();
  std::string success;

  _QueryService_Get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const QueryService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Get_presult__isset {
  _QueryService_Get_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Get_presult__isset;

class QueryService_Get_presult {
 public:


  virtual ~QueryService_Get_presult() throw();
  std::string* success;

  _QueryService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_Extract_args__isset {
  _QueryService_Extract_args__isset() : key(false), offset(false), length(false) {}
  bool key :1;
  bool offset :1;
  bool length :1;
} _QueryService_Extract_args__isset;

class QueryService_Extract_args {
 public:

  QueryService_Extract_args(const QueryService_Extract_args&);
  QueryService_Extract_args& operator=(const QueryService_Extract_args&);
  QueryService_Extract_args() : key(0), offset(0), length(0) {
  }

  virtual ~QueryService_Extract_args() throw();
  int64_t key;
  int32_t offset;
  int32_t length;

  _QueryService_Extract_args__isset __isset;

  void __set_key(const int64_t val);

  void __set_offset(const int32_t val);

  void __set_length(const int32_t val);

  bool operator == (const QueryService_Extract_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const QueryService_Extract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Extract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Extract_pargs {
 public:


  virtual ~QueryService_Extract_pargs() throw();
  const int64_t* key;
  const int32_t* offset;
  const int32_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Extract_result__isset {
  _QueryService_Extract_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Extract_result__isset;

class QueryService_Extract_result {
 public:

  QueryService_Extract_result(const QueryService_Extract_result&);
  QueryService_Extract_result& operator=(const QueryService_Extract_result&);
  QueryService_Extract_result() : success() {
  }

  virtual ~QueryService_Extract_result() throw();
  std::string success;

  _QueryService_Extract_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const QueryService_Extract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Extract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Extract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Extract_presult__isset {
  _QueryService_Extract_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Extract_presult__isset;

class QueryService_Extract_presult {
 public:


  virtual ~QueryService_Extract_presult() throw();
  std::string* success;

  _QueryService_Extract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_Search_args__isset {
  _QueryService_Search_args__isset() : query(false) {}
  bool query :1;
} _QueryService_Search_args__isset;

class QueryService_Search_args {
 public:

  QueryService_Search_args(const QueryService_Search_args&);
  QueryService_Search_args& operator=(const QueryService_Search_args&);
  QueryService_Search_args() : query() {
  }

  virtual ~QueryService_Search_args() throw();
  std::string query;

  _QueryService_Search_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const QueryService_Search_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const QueryService_Search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Search_pargs {
 public:


  virtual ~QueryService_Search_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Search_result__isset {
  _QueryService_Search_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Search_result__isset;

class QueryService_Search_result {
 public:

  QueryService_Search_result(const QueryService_Search_result&);
  QueryService_Search_result& operator=(const QueryService_Search_result&);
  QueryService_Search_result() {
  }

  virtual ~QueryService_Search_result() throw();
  std::set<int64_t>  success;

  _QueryService_Search_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const QueryService_Search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Search_presult__isset {
  _QueryService_Search_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Search_presult__isset;

class QueryService_Search_presult {
 public:


  virtual ~QueryService_Search_presult() throw();
  std::set<int64_t> * success;

  _QueryService_Search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_Count_args__isset {
  _QueryService_Count_args__isset() : query(false) {}
  bool query :1;
} _QueryService_Count_args__isset;

class QueryService_Count_args {
 public:

  QueryService_Count_args(const QueryService_Count_args&);
  QueryService_Count_args& operator=(const QueryService_Count_args&);
  QueryService_Count_args() : query() {
  }

  virtual ~QueryService_Count_args() throw();
  std::string query;

  _QueryService_Count_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const QueryService_Count_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const QueryService_Count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Count_pargs {
 public:


  virtual ~QueryService_Count_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Count_result__isset {
  _QueryService_Count_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Count_result__isset;

class QueryService_Count_result {
 public:

  QueryService_Count_result(const QueryService_Count_result&);
  QueryService_Count_result& operator=(const QueryService_Count_result&);
  QueryService_Count_result() : success(0) {
  }

  virtual ~QueryService_Count_result() throw();
  int64_t success;

  _QueryService_Count_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const QueryService_Count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Count_presult__isset {
  _QueryService_Count_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Count_presult__isset;

class QueryService_Count_presult {
 public:


  virtual ~QueryService_Count_presult() throw();
  int64_t* success;

  _QueryService_Count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueryService_RegexSearch_args__isset {
  _QueryService_RegexSearch_args__isset() : query(false) {}
  bool query :1;
} _QueryService_RegexSearch_args__isset;

class QueryService_RegexSearch_args {
 public:

  QueryService_RegexSearch_args(const QueryService_RegexSearch_args&);
  QueryService_RegexSearch_args& operator=(const QueryService_RegexSearch_args&);
  QueryService_RegexSearch_args() : query() {
  }

  virtual ~QueryService_RegexSearch_args() throw();
  std::string query;

  _QueryService_RegexSearch_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const QueryService_RegexSearch_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const QueryService_RegexSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_RegexSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_RegexSearch_pargs {
 public:


  virtual ~QueryService_RegexSearch_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_RegexSearch_result__isset {
  _QueryService_RegexSearch_result__isset() : success(false) {}
  bool success :1;
} _QueryService_RegexSearch_result__isset;

class QueryService_RegexSearch_result {
 public:

  QueryService_RegexSearch_result(const QueryService_RegexSearch_result&);
  QueryService_RegexSearch_result& operator=(const QueryService_RegexSearch_result&);
  QueryService_RegexSearch_result() {
  }

  virtual ~QueryService_RegexSearch_result() throw();
  std::set<int64_t>  success;

  _QueryService_RegexSearch_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const QueryService_RegexSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_RegexSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_RegexSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_RegexSearch_presult__isset {
  _QueryService_RegexSearch_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_RegexSearch_presult__isset;

class QueryService_RegexSearch_presult {
 public:


  virtual ~QueryService_RegexSearch_presult() throw();
  std::set<int64_t> * success;

  _QueryService_RegexSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_GetNumKeys_args {
 public:

  QueryService_GetNumKeys_args(const QueryService_GetNumKeys_args&);
  QueryService_GetNumKeys_args& operator=(const QueryService_GetNumKeys_args&);
  QueryService_GetNumKeys_args() {
  }

  virtual ~QueryService_GetNumKeys_args() throw();

  bool operator == (const QueryService_GetNumKeys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryService_GetNumKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetNumKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_GetNumKeys_pargs {
 public:


  virtual ~QueryService_GetNumKeys_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetNumKeys_result__isset {
  _QueryService_GetNumKeys_result__isset() : success(false) {}
  bool success :1;
} _QueryService_GetNumKeys_result__isset;

class QueryService_GetNumKeys_result {
 public:

  QueryService_GetNumKeys_result(const QueryService_GetNumKeys_result&);
  QueryService_GetNumKeys_result& operator=(const QueryService_GetNumKeys_result&);
  QueryService_GetNumKeys_result() : success(0) {
  }

  virtual ~QueryService_GetNumKeys_result() throw();
  int32_t success;

  _QueryService_GetNumKeys_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const QueryService_GetNumKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_GetNumKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetNumKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetNumKeys_presult__isset {
  _QueryService_GetNumKeys_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_GetNumKeys_presult__isset;

class QueryService_GetNumKeys_presult {
 public:


  virtual ~QueryService_GetNumKeys_presult() throw();
  int32_t* success;

  _QueryService_GetNumKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_GetShardSize_args {
 public:

  QueryService_GetShardSize_args(const QueryService_GetShardSize_args&);
  QueryService_GetShardSize_args& operator=(const QueryService_GetShardSize_args&);
  QueryService_GetShardSize_args() {
  }

  virtual ~QueryService_GetShardSize_args() throw();

  bool operator == (const QueryService_GetShardSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryService_GetShardSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetShardSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_GetShardSize_pargs {
 public:


  virtual ~QueryService_GetShardSize_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetShardSize_result__isset {
  _QueryService_GetShardSize_result__isset() : success(false) {}
  bool success :1;
} _QueryService_GetShardSize_result__isset;

class QueryService_GetShardSize_result {
 public:

  QueryService_GetShardSize_result(const QueryService_GetShardSize_result&);
  QueryService_GetShardSize_result& operator=(const QueryService_GetShardSize_result&);
  QueryService_GetShardSize_result() : success(0) {
  }

  virtual ~QueryService_GetShardSize_result() throw();
  int64_t success;

  _QueryService_GetShardSize_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const QueryService_GetShardSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_GetShardSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetShardSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetShardSize_presult__isset {
  _QueryService_GetShardSize_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_GetShardSize_presult__isset;

class QueryService_GetShardSize_presult {
 public:


  virtual ~QueryService_GetShardSize_presult() throw();
  int64_t* success;

  _QueryService_GetShardSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_Ping_args {
 public:

  QueryService_Ping_args(const QueryService_Ping_args&);
  QueryService_Ping_args& operator=(const QueryService_Ping_args&);
  QueryService_Ping_args() {
  }

  virtual ~QueryService_Ping_args() throw();

  bool operator == (const QueryService_Ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryService_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_Ping_pargs {
 public:


  virtual ~QueryService_Ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Ping_result__isset {
  _QueryService_Ping_result__isset() : success(false) {}
  bool success :1;
} _QueryService_Ping_result__isset;

class QueryService_Ping_result {
 public:

  QueryService_Ping_result(const QueryService_Ping_result&);
  QueryService_Ping_result& operator=(const QueryService_Ping_result&);
  QueryService_Ping_result() {
  }

  virtual ~QueryService_Ping_result() throw();
  ServerHeartBeat success;

  _QueryService_Ping_result__isset __isset;

  void __set_success(const ServerHeartBeat& val);

  bool operator == (const QueryService_Ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_Ping_presult__isset {
  _QueryService_Ping_presult__isset() : success(false) {}
  bool success :1;
} _QueryService_Ping_presult__isset;

class QueryService_Ping_presult {
 public:


  virtual ~QueryService_Ping_presult() throw();
  ServerHeartBeat* success;

  _QueryService_Ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QueryServiceClient : virtual public QueryServiceIf {
 public:
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Initialize(const int32_t id);
  void send_Initialize(const int32_t id);
  int32_t recv_Initialize();
  void Get(std::string& _return, const int64_t key);
  void send_Get(const int64_t key);
  void recv_Get(std::string& _return);
  void Extract(std::string& _return, const int64_t key, const int32_t offset, const int32_t length);
  void send_Extract(const int64_t key, const int32_t offset, const int32_t length);
  void recv_Extract(std::string& _return);
  void Search(std::set<int64_t> & _return, const std::string& query);
  void send_Search(const std::string& query);
  void recv_Search(std::set<int64_t> & _return);
  int64_t Count(const std::string& query);
  void send_Count(const std::string& query);
  int64_t recv_Count();
  void RegexSearch(std::set<int64_t> & _return, const std::string& query);
  void send_RegexSearch(const std::string& query);
  void recv_RegexSearch(std::set<int64_t> & _return);
  int32_t GetNumKeys();
  void send_GetNumKeys();
  int32_t recv_GetNumKeys();
  int64_t GetShardSize();
  void send_GetShardSize();
  int64_t recv_GetShardSize();
  void Ping(ServerHeartBeat& _return);
  void send_Ping();
  void recv_Ping(ServerHeartBeat& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Extract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegexSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetShardSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueryServiceProcessor(boost::shared_ptr<QueryServiceIf> iface) :
    iface_(iface) {
    processMap_["Initialize"] = &QueryServiceProcessor::process_Initialize;
    processMap_["Get"] = &QueryServiceProcessor::process_Get;
    processMap_["Extract"] = &QueryServiceProcessor::process_Extract;
    processMap_["Search"] = &QueryServiceProcessor::process_Search;
    processMap_["Count"] = &QueryServiceProcessor::process_Count;
    processMap_["RegexSearch"] = &QueryServiceProcessor::process_RegexSearch;
    processMap_["GetNumKeys"] = &QueryServiceProcessor::process_GetNumKeys;
    processMap_["GetShardSize"] = &QueryServiceProcessor::process_GetShardSize;
    processMap_["Ping"] = &QueryServiceProcessor::process_Ping;
  }

  virtual ~QueryServiceProcessor() {}
};

class QueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueryServiceProcessorFactory(const ::boost::shared_ptr< QueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QueryServiceIfFactory > handlerFactory_;
};

class QueryServiceMultiface : virtual public QueryServiceIf {
 public:
  QueryServiceMultiface(std::vector<boost::shared_ptr<QueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QueryServiceIf> > ifaces_;
  QueryServiceMultiface() {}
  void add(boost::shared_ptr<QueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Initialize(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Initialize(id);
    }
    return ifaces_[i]->Initialize(id);
  }

  void Get(std::string& _return, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, key);
    }
    ifaces_[i]->Get(_return, key);
    return;
  }

  void Extract(std::string& _return, const int64_t key, const int32_t offset, const int32_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Extract(_return, key, offset, length);
    }
    ifaces_[i]->Extract(_return, key, offset, length);
    return;
  }

  void Search(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Search(_return, query);
    }
    ifaces_[i]->Search(_return, query);
    return;
  }

  int64_t Count(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Count(query);
    }
    return ifaces_[i]->Count(query);
  }

  void RegexSearch(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegexSearch(_return, query);
    }
    ifaces_[i]->RegexSearch(_return, query);
    return;
  }

  int32_t GetNumKeys() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNumKeys();
    }
    return ifaces_[i]->GetNumKeys();
  }

  int64_t GetShardSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetShardSize();
    }
    return ifaces_[i]->GetShardSize();
  }

  void Ping(ServerHeartBeat& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping(_return);
    }
    ifaces_[i]->Ping(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QueryServiceConcurrentClient : virtual public QueryServiceIf {
 public:
  QueryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QueryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Initialize(const int32_t id);
  int32_t send_Initialize(const int32_t id);
  int32_t recv_Initialize(const int32_t seqid);
  void Get(std::string& _return, const int64_t key);
  int32_t send_Get(const int64_t key);
  void recv_Get(std::string& _return, const int32_t seqid);
  void Extract(std::string& _return, const int64_t key, const int32_t offset, const int32_t length);
  int32_t send_Extract(const int64_t key, const int32_t offset, const int32_t length);
  void recv_Extract(std::string& _return, const int32_t seqid);
  void Search(std::set<int64_t> & _return, const std::string& query);
  int32_t send_Search(const std::string& query);
  void recv_Search(std::set<int64_t> & _return, const int32_t seqid);
  int64_t Count(const std::string& query);
  int32_t send_Count(const std::string& query);
  int64_t recv_Count(const int32_t seqid);
  void RegexSearch(std::set<int64_t> & _return, const std::string& query);
  int32_t send_RegexSearch(const std::string& query);
  void recv_RegexSearch(std::set<int64_t> & _return, const int32_t seqid);
  int32_t GetNumKeys();
  int32_t send_GetNumKeys();
  int32_t recv_GetNumKeys(const int32_t seqid);
  int64_t GetShardSize();
  int32_t send_GetShardSize();
  int64_t recv_GetShardSize(const int32_t seqid);
  void Ping(ServerHeartBeat& _return);
  int32_t send_Ping();
  void recv_Ping(ServerHeartBeat& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif

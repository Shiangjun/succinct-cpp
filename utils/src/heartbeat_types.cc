/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "heartbeat_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




HeartBeat::~HeartBeat() throw() {
}


void HeartBeat::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

uint32_t HeartBeat::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartBeat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartBeat");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartBeat &a, HeartBeat &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

HeartBeat::HeartBeat(const HeartBeat& other0) {
  timestamp = other0.timestamp;
  __isset = other0.__isset;
}
HeartBeat& HeartBeat::operator=(const HeartBeat& other1) {
  timestamp = other1.timestamp;
  __isset = other1.__isset;
  return *this;
}
void HeartBeat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartBeat(";
  out << "timestamp=" << to_string(timestamp);
  out << ")";
}



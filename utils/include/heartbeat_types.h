/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef heartbeat_TYPES_H
#define heartbeat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class HeartBeat;

class HeartBeatResponse;

typedef struct _HeartBeat__isset {
  _HeartBeat__isset() : timestamp(false), sender_id(false) {}
  bool timestamp :1;
  bool sender_id :1;
} _HeartBeat__isset;

class HeartBeat {
 public:

  HeartBeat(const HeartBeat&);
  HeartBeat& operator=(const HeartBeat&);
  HeartBeat() : timestamp(0), sender_id(0) {
  }

  virtual ~HeartBeat() throw();
  int64_t timestamp;
  int32_t sender_id;

  _HeartBeat__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_sender_id(const int32_t val);

  bool operator == (const HeartBeat & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(sender_id == rhs.sender_id))
      return false;
    return true;
  }
  bool operator != (const HeartBeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartBeat &a, HeartBeat &b);

inline std::ostream& operator<<(std::ostream& out, const HeartBeat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HeartBeatResponse__isset {
  _HeartBeatResponse__isset() : health(false) {}
  bool health :1;
} _HeartBeatResponse__isset;

class HeartBeatResponse {
 public:

  HeartBeatResponse(const HeartBeatResponse&);
  HeartBeatResponse& operator=(const HeartBeatResponse&);
  HeartBeatResponse() {
  }

  virtual ~HeartBeatResponse() throw();
  std::vector<double>  health;

  _HeartBeatResponse__isset __isset;

  void __set_health(const std::vector<double> & val);

  bool operator == (const HeartBeatResponse & rhs) const
  {
    if (!(health == rhs.health))
      return false;
    return true;
  }
  bool operator != (const HeartBeatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartBeatResponse &a, HeartBeatResponse &b);

inline std::ostream& operator<<(std::ostream& out, const HeartBeatResponse& obj)
{
  obj.printTo(out);
  return out;
}



#endif

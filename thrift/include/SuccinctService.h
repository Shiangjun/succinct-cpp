/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SuccinctService_H
#define SuccinctService_H

#include <thrift/TDispatchProcessor.h>
#include "succinct_types.h"



class SuccinctServiceIf {
 public:
  virtual ~SuccinctServiceIf() {}
  virtual int32_t ConnectToHandlers() = 0;
  virtual int32_t DisconnectFromHandlers() = 0;
  virtual int32_t ConnectToLocalServers() = 0;
  virtual int32_t DisconnectFromLocalServers() = 0;
  virtual int32_t StartLocalServers() = 0;
  virtual int32_t Initialize(const int32_t mode) = 0;
  virtual void Get(std::string& _return, const int64_t key) = 0;
  virtual void GetLocal(std::string& _return, const int32_t qserver_id, const int64_t key) = 0;
  virtual void Access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len) = 0;
  virtual void AccessLocal(std::string& _return, const int32_t qserver_id, const int64_t key, const int32_t offset, const int32_t len) = 0;
  virtual void Search(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual void SearchLocal(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual void RegexSearch(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual void RegexSearchLocal(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual void RegexCount(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual void RegexCountLocal(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual int64_t Count(const std::string& query) = 0;
  virtual int64_t CountLocal(const std::string& query) = 0;
  virtual void FlatExtract(std::string& _return, const int64_t offset, const int64_t length) = 0;
  virtual void FlatExtractLocal(std::string& _return, const int64_t offset, const int64_t length) = 0;
  virtual int64_t FlatCount(const std::string& query) = 0;
  virtual int64_t FlatCountLocal(const std::string& query) = 0;
  virtual void FlatSearch(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual void FlatSearchLocal(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual int32_t GetNumHosts() = 0;
  virtual int32_t GetNumShards(const int32_t host_id) = 0;
  virtual int32_t GetNumKeys(const int32_t shard_id) = 0;
  virtual int64_t GetTotSize() = 0;
};

class SuccinctServiceIfFactory {
 public:
  typedef SuccinctServiceIf Handler;

  virtual ~SuccinctServiceIfFactory() {}

  virtual SuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SuccinctServiceIf* /* handler */) = 0;
};

class SuccinctServiceIfSingletonFactory : virtual public SuccinctServiceIfFactory {
 public:
  SuccinctServiceIfSingletonFactory(const boost::shared_ptr<SuccinctServiceIf>& iface) : iface_(iface) {}
  virtual ~SuccinctServiceIfSingletonFactory() {}

  virtual SuccinctServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SuccinctServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SuccinctServiceIf> iface_;
};

class SuccinctServiceNull : virtual public SuccinctServiceIf {
 public:
  virtual ~SuccinctServiceNull() {}
  int32_t ConnectToHandlers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t DisconnectFromHandlers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ConnectToLocalServers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t DisconnectFromLocalServers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t StartLocalServers() {
    int32_t _return = 0;
    return _return;
  }
  int32_t Initialize(const int32_t /* mode */) {
    int32_t _return = 0;
    return _return;
  }
  void Get(std::string& /* _return */, const int64_t /* key */) {
    return;
  }
  void GetLocal(std::string& /* _return */, const int32_t /* qserver_id */, const int64_t /* key */) {
    return;
  }
  void Access(std::string& /* _return */, const int64_t /* key */, const int32_t /* offset */, const int32_t /* len */) {
    return;
  }
  void AccessLocal(std::string& /* _return */, const int32_t /* qserver_id */, const int64_t /* key */, const int32_t /* offset */, const int32_t /* len */) {
    return;
  }
  void Search(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void SearchLocal(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void RegexSearch(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void RegexSearchLocal(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void RegexCount(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void RegexCountLocal(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  int64_t Count(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t CountLocal(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void FlatExtract(std::string& /* _return */, const int64_t /* offset */, const int64_t /* length */) {
    return;
  }
  void FlatExtractLocal(std::string& /* _return */, const int64_t /* offset */, const int64_t /* length */) {
    return;
  }
  int64_t FlatCount(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t FlatCountLocal(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void FlatSearch(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void FlatSearchLocal(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  int32_t GetNumHosts() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNumShards(const int32_t /* host_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNumKeys(const int32_t /* shard_id */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t GetTotSize() {
    int64_t _return = 0;
    return _return;
  }
};


class SuccinctService_ConnectToHandlers_args {
 public:

  SuccinctService_ConnectToHandlers_args() {
  }

  virtual ~SuccinctService_ConnectToHandlers_args() throw() {}


  bool operator == (const SuccinctService_ConnectToHandlers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_ConnectToHandlers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_ConnectToHandlers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_ConnectToHandlers_pargs {
 public:


  virtual ~SuccinctService_ConnectToHandlers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_ConnectToHandlers_result__isset {
  _SuccinctService_ConnectToHandlers_result__isset() : success(false) {}
  bool success;
} _SuccinctService_ConnectToHandlers_result__isset;

class SuccinctService_ConnectToHandlers_result {
 public:

  SuccinctService_ConnectToHandlers_result() : success(0) {
  }

  virtual ~SuccinctService_ConnectToHandlers_result() throw() {}

  int32_t success;

  _SuccinctService_ConnectToHandlers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_ConnectToHandlers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_ConnectToHandlers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_ConnectToHandlers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_ConnectToHandlers_presult__isset {
  _SuccinctService_ConnectToHandlers_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_ConnectToHandlers_presult__isset;

class SuccinctService_ConnectToHandlers_presult {
 public:


  virtual ~SuccinctService_ConnectToHandlers_presult() throw() {}

  int32_t* success;

  _SuccinctService_ConnectToHandlers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_DisconnectFromHandlers_args {
 public:

  SuccinctService_DisconnectFromHandlers_args() {
  }

  virtual ~SuccinctService_DisconnectFromHandlers_args() throw() {}


  bool operator == (const SuccinctService_DisconnectFromHandlers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_DisconnectFromHandlers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_DisconnectFromHandlers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_DisconnectFromHandlers_pargs {
 public:


  virtual ~SuccinctService_DisconnectFromHandlers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_DisconnectFromHandlers_result__isset {
  _SuccinctService_DisconnectFromHandlers_result__isset() : success(false) {}
  bool success;
} _SuccinctService_DisconnectFromHandlers_result__isset;

class SuccinctService_DisconnectFromHandlers_result {
 public:

  SuccinctService_DisconnectFromHandlers_result() : success(0) {
  }

  virtual ~SuccinctService_DisconnectFromHandlers_result() throw() {}

  int32_t success;

  _SuccinctService_DisconnectFromHandlers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_DisconnectFromHandlers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_DisconnectFromHandlers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_DisconnectFromHandlers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_DisconnectFromHandlers_presult__isset {
  _SuccinctService_DisconnectFromHandlers_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_DisconnectFromHandlers_presult__isset;

class SuccinctService_DisconnectFromHandlers_presult {
 public:


  virtual ~SuccinctService_DisconnectFromHandlers_presult() throw() {}

  int32_t* success;

  _SuccinctService_DisconnectFromHandlers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_ConnectToLocalServers_args {
 public:

  SuccinctService_ConnectToLocalServers_args() {
  }

  virtual ~SuccinctService_ConnectToLocalServers_args() throw() {}


  bool operator == (const SuccinctService_ConnectToLocalServers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_ConnectToLocalServers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_ConnectToLocalServers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_ConnectToLocalServers_pargs {
 public:


  virtual ~SuccinctService_ConnectToLocalServers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_ConnectToLocalServers_result__isset {
  _SuccinctService_ConnectToLocalServers_result__isset() : success(false) {}
  bool success;
} _SuccinctService_ConnectToLocalServers_result__isset;

class SuccinctService_ConnectToLocalServers_result {
 public:

  SuccinctService_ConnectToLocalServers_result() : success(0) {
  }

  virtual ~SuccinctService_ConnectToLocalServers_result() throw() {}

  int32_t success;

  _SuccinctService_ConnectToLocalServers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_ConnectToLocalServers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_ConnectToLocalServers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_ConnectToLocalServers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_ConnectToLocalServers_presult__isset {
  _SuccinctService_ConnectToLocalServers_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_ConnectToLocalServers_presult__isset;

class SuccinctService_ConnectToLocalServers_presult {
 public:


  virtual ~SuccinctService_ConnectToLocalServers_presult() throw() {}

  int32_t* success;

  _SuccinctService_ConnectToLocalServers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_DisconnectFromLocalServers_args {
 public:

  SuccinctService_DisconnectFromLocalServers_args() {
  }

  virtual ~SuccinctService_DisconnectFromLocalServers_args() throw() {}


  bool operator == (const SuccinctService_DisconnectFromLocalServers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_DisconnectFromLocalServers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_DisconnectFromLocalServers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_DisconnectFromLocalServers_pargs {
 public:


  virtual ~SuccinctService_DisconnectFromLocalServers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_DisconnectFromLocalServers_result__isset {
  _SuccinctService_DisconnectFromLocalServers_result__isset() : success(false) {}
  bool success;
} _SuccinctService_DisconnectFromLocalServers_result__isset;

class SuccinctService_DisconnectFromLocalServers_result {
 public:

  SuccinctService_DisconnectFromLocalServers_result() : success(0) {
  }

  virtual ~SuccinctService_DisconnectFromLocalServers_result() throw() {}

  int32_t success;

  _SuccinctService_DisconnectFromLocalServers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_DisconnectFromLocalServers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_DisconnectFromLocalServers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_DisconnectFromLocalServers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_DisconnectFromLocalServers_presult__isset {
  _SuccinctService_DisconnectFromLocalServers_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_DisconnectFromLocalServers_presult__isset;

class SuccinctService_DisconnectFromLocalServers_presult {
 public:


  virtual ~SuccinctService_DisconnectFromLocalServers_presult() throw() {}

  int32_t* success;

  _SuccinctService_DisconnectFromLocalServers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_StartLocalServers_args {
 public:

  SuccinctService_StartLocalServers_args() {
  }

  virtual ~SuccinctService_StartLocalServers_args() throw() {}


  bool operator == (const SuccinctService_StartLocalServers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_StartLocalServers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_StartLocalServers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_StartLocalServers_pargs {
 public:


  virtual ~SuccinctService_StartLocalServers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_StartLocalServers_result__isset {
  _SuccinctService_StartLocalServers_result__isset() : success(false) {}
  bool success;
} _SuccinctService_StartLocalServers_result__isset;

class SuccinctService_StartLocalServers_result {
 public:

  SuccinctService_StartLocalServers_result() : success(0) {
  }

  virtual ~SuccinctService_StartLocalServers_result() throw() {}

  int32_t success;

  _SuccinctService_StartLocalServers_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_StartLocalServers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_StartLocalServers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_StartLocalServers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_StartLocalServers_presult__isset {
  _SuccinctService_StartLocalServers_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_StartLocalServers_presult__isset;

class SuccinctService_StartLocalServers_presult {
 public:


  virtual ~SuccinctService_StartLocalServers_presult() throw() {}

  int32_t* success;

  _SuccinctService_StartLocalServers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_Initialize_args__isset {
  _SuccinctService_Initialize_args__isset() : mode(false) {}
  bool mode;
} _SuccinctService_Initialize_args__isset;

class SuccinctService_Initialize_args {
 public:

  SuccinctService_Initialize_args() : mode(0) {
  }

  virtual ~SuccinctService_Initialize_args() throw() {}

  int32_t mode;

  _SuccinctService_Initialize_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  bool operator == (const SuccinctService_Initialize_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_Initialize_pargs {
 public:


  virtual ~SuccinctService_Initialize_pargs() throw() {}

  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Initialize_result__isset {
  _SuccinctService_Initialize_result__isset() : success(false) {}
  bool success;
} _SuccinctService_Initialize_result__isset;

class SuccinctService_Initialize_result {
 public:

  SuccinctService_Initialize_result() : success(0) {
  }

  virtual ~SuccinctService_Initialize_result() throw() {}

  int32_t success;

  _SuccinctService_Initialize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_Initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Initialize_presult__isset {
  _SuccinctService_Initialize_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_Initialize_presult__isset;

class SuccinctService_Initialize_presult {
 public:


  virtual ~SuccinctService_Initialize_presult() throw() {}

  int32_t* success;

  _SuccinctService_Initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_Get_args__isset {
  _SuccinctService_Get_args__isset() : key(false) {}
  bool key;
} _SuccinctService_Get_args__isset;

class SuccinctService_Get_args {
 public:

  SuccinctService_Get_args() : key(0) {
  }

  virtual ~SuccinctService_Get_args() throw() {}

  int64_t key;

  _SuccinctService_Get_args__isset __isset;

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const SuccinctService_Get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_Get_pargs {
 public:


  virtual ~SuccinctService_Get_pargs() throw() {}

  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Get_result__isset {
  _SuccinctService_Get_result__isset() : success(false) {}
  bool success;
} _SuccinctService_Get_result__isset;

class SuccinctService_Get_result {
 public:

  SuccinctService_Get_result() : success() {
  }

  virtual ~SuccinctService_Get_result() throw() {}

  std::string success;

  _SuccinctService_Get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Get_presult__isset {
  _SuccinctService_Get_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_Get_presult__isset;

class SuccinctService_Get_presult {
 public:


  virtual ~SuccinctService_Get_presult() throw() {}

  std::string* success;

  _SuccinctService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_GetLocal_args__isset {
  _SuccinctService_GetLocal_args__isset() : qserver_id(false), key(false) {}
  bool qserver_id;
  bool key;
} _SuccinctService_GetLocal_args__isset;

class SuccinctService_GetLocal_args {
 public:

  SuccinctService_GetLocal_args() : qserver_id(0), key(0) {
  }

  virtual ~SuccinctService_GetLocal_args() throw() {}

  int32_t qserver_id;
  int64_t key;

  _SuccinctService_GetLocal_args__isset __isset;

  void __set_qserver_id(const int32_t val) {
    qserver_id = val;
  }

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const SuccinctService_GetLocal_args & rhs) const
  {
    if (!(qserver_id == rhs.qserver_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_GetLocal_pargs {
 public:


  virtual ~SuccinctService_GetLocal_pargs() throw() {}

  const int32_t* qserver_id;
  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetLocal_result__isset {
  _SuccinctService_GetLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_GetLocal_result__isset;

class SuccinctService_GetLocal_result {
 public:

  SuccinctService_GetLocal_result() : success() {
  }

  virtual ~SuccinctService_GetLocal_result() throw() {}

  std::string success;

  _SuccinctService_GetLocal_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_GetLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetLocal_presult__isset {
  _SuccinctService_GetLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_GetLocal_presult__isset;

class SuccinctService_GetLocal_presult {
 public:


  virtual ~SuccinctService_GetLocal_presult() throw() {}

  std::string* success;

  _SuccinctService_GetLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_Access_args__isset {
  _SuccinctService_Access_args__isset() : key(false), offset(false), len(false) {}
  bool key;
  bool offset;
  bool len;
} _SuccinctService_Access_args__isset;

class SuccinctService_Access_args {
 public:

  SuccinctService_Access_args() : key(0), offset(0), len(0) {
  }

  virtual ~SuccinctService_Access_args() throw() {}

  int64_t key;
  int32_t offset;
  int32_t len;

  _SuccinctService_Access_args__isset __isset;

  void __set_key(const int64_t val) {
    key = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const SuccinctService_Access_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_Access_pargs {
 public:


  virtual ~SuccinctService_Access_pargs() throw() {}

  const int64_t* key;
  const int32_t* offset;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Access_result__isset {
  _SuccinctService_Access_result__isset() : success(false) {}
  bool success;
} _SuccinctService_Access_result__isset;

class SuccinctService_Access_result {
 public:

  SuccinctService_Access_result() : success() {
  }

  virtual ~SuccinctService_Access_result() throw() {}

  std::string success;

  _SuccinctService_Access_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_Access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Access_presult__isset {
  _SuccinctService_Access_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_Access_presult__isset;

class SuccinctService_Access_presult {
 public:


  virtual ~SuccinctService_Access_presult() throw() {}

  std::string* success;

  _SuccinctService_Access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_AccessLocal_args__isset {
  _SuccinctService_AccessLocal_args__isset() : qserver_id(false), key(false), offset(false), len(false) {}
  bool qserver_id;
  bool key;
  bool offset;
  bool len;
} _SuccinctService_AccessLocal_args__isset;

class SuccinctService_AccessLocal_args {
 public:

  SuccinctService_AccessLocal_args() : qserver_id(0), key(0), offset(0), len(0) {
  }

  virtual ~SuccinctService_AccessLocal_args() throw() {}

  int32_t qserver_id;
  int64_t key;
  int32_t offset;
  int32_t len;

  _SuccinctService_AccessLocal_args__isset __isset;

  void __set_qserver_id(const int32_t val) {
    qserver_id = val;
  }

  void __set_key(const int64_t val) {
    key = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const SuccinctService_AccessLocal_args & rhs) const
  {
    if (!(qserver_id == rhs.qserver_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_AccessLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_AccessLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_AccessLocal_pargs {
 public:


  virtual ~SuccinctService_AccessLocal_pargs() throw() {}

  const int32_t* qserver_id;
  const int64_t* key;
  const int32_t* offset;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_AccessLocal_result__isset {
  _SuccinctService_AccessLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_AccessLocal_result__isset;

class SuccinctService_AccessLocal_result {
 public:

  SuccinctService_AccessLocal_result() : success() {
  }

  virtual ~SuccinctService_AccessLocal_result() throw() {}

  std::string success;

  _SuccinctService_AccessLocal_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_AccessLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_AccessLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_AccessLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_AccessLocal_presult__isset {
  _SuccinctService_AccessLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_AccessLocal_presult__isset;

class SuccinctService_AccessLocal_presult {
 public:


  virtual ~SuccinctService_AccessLocal_presult() throw() {}

  std::string* success;

  _SuccinctService_AccessLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_Search_args__isset {
  _SuccinctService_Search_args__isset() : query(false) {}
  bool query;
} _SuccinctService_Search_args__isset;

class SuccinctService_Search_args {
 public:

  SuccinctService_Search_args() : query() {
  }

  virtual ~SuccinctService_Search_args() throw() {}

  std::string query;

  _SuccinctService_Search_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_Search_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_Search_pargs {
 public:


  virtual ~SuccinctService_Search_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Search_result__isset {
  _SuccinctService_Search_result__isset() : success(false) {}
  bool success;
} _SuccinctService_Search_result__isset;

class SuccinctService_Search_result {
 public:

  SuccinctService_Search_result() {
  }

  virtual ~SuccinctService_Search_result() throw() {}

  std::set<int64_t>  success;

  _SuccinctService_Search_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_Search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Search_presult__isset {
  _SuccinctService_Search_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_Search_presult__isset;

class SuccinctService_Search_presult {
 public:


  virtual ~SuccinctService_Search_presult() throw() {}

  std::set<int64_t> * success;

  _SuccinctService_Search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_SearchLocal_args__isset {
  _SuccinctService_SearchLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_SearchLocal_args__isset;

class SuccinctService_SearchLocal_args {
 public:

  SuccinctService_SearchLocal_args() : query() {
  }

  virtual ~SuccinctService_SearchLocal_args() throw() {}

  std::string query;

  _SuccinctService_SearchLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_SearchLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_SearchLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_SearchLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_SearchLocal_pargs {
 public:


  virtual ~SuccinctService_SearchLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_SearchLocal_result__isset {
  _SuccinctService_SearchLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_SearchLocal_result__isset;

class SuccinctService_SearchLocal_result {
 public:

  SuccinctService_SearchLocal_result() {
  }

  virtual ~SuccinctService_SearchLocal_result() throw() {}

  std::set<int64_t>  success;

  _SuccinctService_SearchLocal_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_SearchLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_SearchLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_SearchLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_SearchLocal_presult__isset {
  _SuccinctService_SearchLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_SearchLocal_presult__isset;

class SuccinctService_SearchLocal_presult {
 public:


  virtual ~SuccinctService_SearchLocal_presult() throw() {}

  std::set<int64_t> * success;

  _SuccinctService_SearchLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_RegexSearch_args__isset {
  _SuccinctService_RegexSearch_args__isset() : query(false) {}
  bool query;
} _SuccinctService_RegexSearch_args__isset;

class SuccinctService_RegexSearch_args {
 public:

  SuccinctService_RegexSearch_args() : query() {
  }

  virtual ~SuccinctService_RegexSearch_args() throw() {}

  std::string query;

  _SuccinctService_RegexSearch_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_RegexSearch_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_RegexSearch_pargs {
 public:


  virtual ~SuccinctService_RegexSearch_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexSearch_result__isset {
  _SuccinctService_RegexSearch_result__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexSearch_result__isset;

class SuccinctService_RegexSearch_result {
 public:

  SuccinctService_RegexSearch_result() {
  }

  virtual ~SuccinctService_RegexSearch_result() throw() {}

  std::set<int64_t>  success;

  _SuccinctService_RegexSearch_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_RegexSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexSearch_presult__isset {
  _SuccinctService_RegexSearch_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexSearch_presult__isset;

class SuccinctService_RegexSearch_presult {
 public:


  virtual ~SuccinctService_RegexSearch_presult() throw() {}

  std::set<int64_t> * success;

  _SuccinctService_RegexSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_RegexSearchLocal_args__isset {
  _SuccinctService_RegexSearchLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_RegexSearchLocal_args__isset;

class SuccinctService_RegexSearchLocal_args {
 public:

  SuccinctService_RegexSearchLocal_args() : query() {
  }

  virtual ~SuccinctService_RegexSearchLocal_args() throw() {}

  std::string query;

  _SuccinctService_RegexSearchLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_RegexSearchLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexSearchLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexSearchLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_RegexSearchLocal_pargs {
 public:


  virtual ~SuccinctService_RegexSearchLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexSearchLocal_result__isset {
  _SuccinctService_RegexSearchLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexSearchLocal_result__isset;

class SuccinctService_RegexSearchLocal_result {
 public:

  SuccinctService_RegexSearchLocal_result() {
  }

  virtual ~SuccinctService_RegexSearchLocal_result() throw() {}

  std::set<int64_t>  success;

  _SuccinctService_RegexSearchLocal_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_RegexSearchLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexSearchLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexSearchLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexSearchLocal_presult__isset {
  _SuccinctService_RegexSearchLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexSearchLocal_presult__isset;

class SuccinctService_RegexSearchLocal_presult {
 public:


  virtual ~SuccinctService_RegexSearchLocal_presult() throw() {}

  std::set<int64_t> * success;

  _SuccinctService_RegexSearchLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_RegexCount_args__isset {
  _SuccinctService_RegexCount_args__isset() : query(false) {}
  bool query;
} _SuccinctService_RegexCount_args__isset;

class SuccinctService_RegexCount_args {
 public:

  SuccinctService_RegexCount_args() : query() {
  }

  virtual ~SuccinctService_RegexCount_args() throw() {}

  std::string query;

  _SuccinctService_RegexCount_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_RegexCount_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_RegexCount_pargs {
 public:


  virtual ~SuccinctService_RegexCount_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexCount_result__isset {
  _SuccinctService_RegexCount_result__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexCount_result__isset;

class SuccinctService_RegexCount_result {
 public:

  SuccinctService_RegexCount_result() {
  }

  virtual ~SuccinctService_RegexCount_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_RegexCount_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_RegexCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexCount_presult__isset {
  _SuccinctService_RegexCount_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexCount_presult__isset;

class SuccinctService_RegexCount_presult {
 public:


  virtual ~SuccinctService_RegexCount_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_RegexCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_RegexCountLocal_args__isset {
  _SuccinctService_RegexCountLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_RegexCountLocal_args__isset;

class SuccinctService_RegexCountLocal_args {
 public:

  SuccinctService_RegexCountLocal_args() : query() {
  }

  virtual ~SuccinctService_RegexCountLocal_args() throw() {}

  std::string query;

  _SuccinctService_RegexCountLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_RegexCountLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexCountLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexCountLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_RegexCountLocal_pargs {
 public:


  virtual ~SuccinctService_RegexCountLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexCountLocal_result__isset {
  _SuccinctService_RegexCountLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexCountLocal_result__isset;

class SuccinctService_RegexCountLocal_result {
 public:

  SuccinctService_RegexCountLocal_result() {
  }

  virtual ~SuccinctService_RegexCountLocal_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_RegexCountLocal_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_RegexCountLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_RegexCountLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_RegexCountLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_RegexCountLocal_presult__isset {
  _SuccinctService_RegexCountLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_RegexCountLocal_presult__isset;

class SuccinctService_RegexCountLocal_presult {
 public:


  virtual ~SuccinctService_RegexCountLocal_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_RegexCountLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_Count_args__isset {
  _SuccinctService_Count_args__isset() : query(false) {}
  bool query;
} _SuccinctService_Count_args__isset;

class SuccinctService_Count_args {
 public:

  SuccinctService_Count_args() : query() {
  }

  virtual ~SuccinctService_Count_args() throw() {}

  std::string query;

  _SuccinctService_Count_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_Count_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_Count_pargs {
 public:


  virtual ~SuccinctService_Count_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Count_result__isset {
  _SuccinctService_Count_result__isset() : success(false) {}
  bool success;
} _SuccinctService_Count_result__isset;

class SuccinctService_Count_result {
 public:

  SuccinctService_Count_result() : success(0) {
  }

  virtual ~SuccinctService_Count_result() throw() {}

  int64_t success;

  _SuccinctService_Count_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_Count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_Count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_Count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_Count_presult__isset {
  _SuccinctService_Count_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_Count_presult__isset;

class SuccinctService_Count_presult {
 public:


  virtual ~SuccinctService_Count_presult() throw() {}

  int64_t* success;

  _SuccinctService_Count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_CountLocal_args__isset {
  _SuccinctService_CountLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_CountLocal_args__isset;

class SuccinctService_CountLocal_args {
 public:

  SuccinctService_CountLocal_args() : query() {
  }

  virtual ~SuccinctService_CountLocal_args() throw() {}

  std::string query;

  _SuccinctService_CountLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_CountLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_CountLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_CountLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_CountLocal_pargs {
 public:


  virtual ~SuccinctService_CountLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_CountLocal_result__isset {
  _SuccinctService_CountLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_CountLocal_result__isset;

class SuccinctService_CountLocal_result {
 public:

  SuccinctService_CountLocal_result() : success(0) {
  }

  virtual ~SuccinctService_CountLocal_result() throw() {}

  int64_t success;

  _SuccinctService_CountLocal_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_CountLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_CountLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_CountLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_CountLocal_presult__isset {
  _SuccinctService_CountLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_CountLocal_presult__isset;

class SuccinctService_CountLocal_presult {
 public:


  virtual ~SuccinctService_CountLocal_presult() throw() {}

  int64_t* success;

  _SuccinctService_CountLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatExtract_args__isset {
  _SuccinctService_FlatExtract_args__isset() : offset(false), length(false) {}
  bool offset;
  bool length;
} _SuccinctService_FlatExtract_args__isset;

class SuccinctService_FlatExtract_args {
 public:

  SuccinctService_FlatExtract_args() : offset(0), length(0) {
  }

  virtual ~SuccinctService_FlatExtract_args() throw() {}

  int64_t offset;
  int64_t length;

  _SuccinctService_FlatExtract_args__isset __isset;

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_length(const int64_t val) {
    length = val;
  }

  bool operator == (const SuccinctService_FlatExtract_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatExtract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatExtract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatExtract_pargs {
 public:


  virtual ~SuccinctService_FlatExtract_pargs() throw() {}

  const int64_t* offset;
  const int64_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatExtract_result__isset {
  _SuccinctService_FlatExtract_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatExtract_result__isset;

class SuccinctService_FlatExtract_result {
 public:

  SuccinctService_FlatExtract_result() : success() {
  }

  virtual ~SuccinctService_FlatExtract_result() throw() {}

  std::string success;

  _SuccinctService_FlatExtract_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatExtract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatExtract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatExtract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatExtract_presult__isset {
  _SuccinctService_FlatExtract_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatExtract_presult__isset;

class SuccinctService_FlatExtract_presult {
 public:


  virtual ~SuccinctService_FlatExtract_presult() throw() {}

  std::string* success;

  _SuccinctService_FlatExtract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatExtractLocal_args__isset {
  _SuccinctService_FlatExtractLocal_args__isset() : offset(false), length(false) {}
  bool offset;
  bool length;
} _SuccinctService_FlatExtractLocal_args__isset;

class SuccinctService_FlatExtractLocal_args {
 public:

  SuccinctService_FlatExtractLocal_args() : offset(0), length(0) {
  }

  virtual ~SuccinctService_FlatExtractLocal_args() throw() {}

  int64_t offset;
  int64_t length;

  _SuccinctService_FlatExtractLocal_args__isset __isset;

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_length(const int64_t val) {
    length = val;
  }

  bool operator == (const SuccinctService_FlatExtractLocal_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatExtractLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatExtractLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatExtractLocal_pargs {
 public:


  virtual ~SuccinctService_FlatExtractLocal_pargs() throw() {}

  const int64_t* offset;
  const int64_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatExtractLocal_result__isset {
  _SuccinctService_FlatExtractLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatExtractLocal_result__isset;

class SuccinctService_FlatExtractLocal_result {
 public:

  SuccinctService_FlatExtractLocal_result() : success() {
  }

  virtual ~SuccinctService_FlatExtractLocal_result() throw() {}

  std::string success;

  _SuccinctService_FlatExtractLocal_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatExtractLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatExtractLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatExtractLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatExtractLocal_presult__isset {
  _SuccinctService_FlatExtractLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatExtractLocal_presult__isset;

class SuccinctService_FlatExtractLocal_presult {
 public:


  virtual ~SuccinctService_FlatExtractLocal_presult() throw() {}

  std::string* success;

  _SuccinctService_FlatExtractLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatCount_args__isset {
  _SuccinctService_FlatCount_args__isset() : query(false) {}
  bool query;
} _SuccinctService_FlatCount_args__isset;

class SuccinctService_FlatCount_args {
 public:

  SuccinctService_FlatCount_args() : query() {
  }

  virtual ~SuccinctService_FlatCount_args() throw() {}

  std::string query;

  _SuccinctService_FlatCount_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_FlatCount_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatCount_pargs {
 public:


  virtual ~SuccinctService_FlatCount_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatCount_result__isset {
  _SuccinctService_FlatCount_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatCount_result__isset;

class SuccinctService_FlatCount_result {
 public:

  SuccinctService_FlatCount_result() : success(0) {
  }

  virtual ~SuccinctService_FlatCount_result() throw() {}

  int64_t success;

  _SuccinctService_FlatCount_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatCount_presult__isset {
  _SuccinctService_FlatCount_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatCount_presult__isset;

class SuccinctService_FlatCount_presult {
 public:


  virtual ~SuccinctService_FlatCount_presult() throw() {}

  int64_t* success;

  _SuccinctService_FlatCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatCountLocal_args__isset {
  _SuccinctService_FlatCountLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_FlatCountLocal_args__isset;

class SuccinctService_FlatCountLocal_args {
 public:

  SuccinctService_FlatCountLocal_args() : query() {
  }

  virtual ~SuccinctService_FlatCountLocal_args() throw() {}

  std::string query;

  _SuccinctService_FlatCountLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_FlatCountLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatCountLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatCountLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatCountLocal_pargs {
 public:


  virtual ~SuccinctService_FlatCountLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatCountLocal_result__isset {
  _SuccinctService_FlatCountLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatCountLocal_result__isset;

class SuccinctService_FlatCountLocal_result {
 public:

  SuccinctService_FlatCountLocal_result() : success(0) {
  }

  virtual ~SuccinctService_FlatCountLocal_result() throw() {}

  int64_t success;

  _SuccinctService_FlatCountLocal_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatCountLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatCountLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatCountLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatCountLocal_presult__isset {
  _SuccinctService_FlatCountLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatCountLocal_presult__isset;

class SuccinctService_FlatCountLocal_presult {
 public:


  virtual ~SuccinctService_FlatCountLocal_presult() throw() {}

  int64_t* success;

  _SuccinctService_FlatCountLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatSearch_args__isset {
  _SuccinctService_FlatSearch_args__isset() : query(false) {}
  bool query;
} _SuccinctService_FlatSearch_args__isset;

class SuccinctService_FlatSearch_args {
 public:

  SuccinctService_FlatSearch_args() : query() {
  }

  virtual ~SuccinctService_FlatSearch_args() throw() {}

  std::string query;

  _SuccinctService_FlatSearch_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_FlatSearch_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatSearch_pargs {
 public:


  virtual ~SuccinctService_FlatSearch_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatSearch_result__isset {
  _SuccinctService_FlatSearch_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatSearch_result__isset;

class SuccinctService_FlatSearch_result {
 public:

  SuccinctService_FlatSearch_result() {
  }

  virtual ~SuccinctService_FlatSearch_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_FlatSearch_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatSearch_presult__isset {
  _SuccinctService_FlatSearch_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatSearch_presult__isset;

class SuccinctService_FlatSearch_presult {
 public:


  virtual ~SuccinctService_FlatSearch_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_FlatSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_FlatSearchLocal_args__isset {
  _SuccinctService_FlatSearchLocal_args__isset() : query(false) {}
  bool query;
} _SuccinctService_FlatSearchLocal_args__isset;

class SuccinctService_FlatSearchLocal_args {
 public:

  SuccinctService_FlatSearchLocal_args() : query() {
  }

  virtual ~SuccinctService_FlatSearchLocal_args() throw() {}

  std::string query;

  _SuccinctService_FlatSearchLocal_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const SuccinctService_FlatSearchLocal_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatSearchLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatSearchLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_FlatSearchLocal_pargs {
 public:


  virtual ~SuccinctService_FlatSearchLocal_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatSearchLocal_result__isset {
  _SuccinctService_FlatSearchLocal_result__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatSearchLocal_result__isset;

class SuccinctService_FlatSearchLocal_result {
 public:

  SuccinctService_FlatSearchLocal_result() {
  }

  virtual ~SuccinctService_FlatSearchLocal_result() throw() {}

  std::vector<int64_t>  success;

  _SuccinctService_FlatSearchLocal_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const SuccinctService_FlatSearchLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_FlatSearchLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_FlatSearchLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_FlatSearchLocal_presult__isset {
  _SuccinctService_FlatSearchLocal_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_FlatSearchLocal_presult__isset;

class SuccinctService_FlatSearchLocal_presult {
 public:


  virtual ~SuccinctService_FlatSearchLocal_presult() throw() {}

  std::vector<int64_t> * success;

  _SuccinctService_FlatSearchLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_GetNumHosts_args {
 public:

  SuccinctService_GetNumHosts_args() {
  }

  virtual ~SuccinctService_GetNumHosts_args() throw() {}


  bool operator == (const SuccinctService_GetNumHosts_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_GetNumHosts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumHosts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_GetNumHosts_pargs {
 public:


  virtual ~SuccinctService_GetNumHosts_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumHosts_result__isset {
  _SuccinctService_GetNumHosts_result__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumHosts_result__isset;

class SuccinctService_GetNumHosts_result {
 public:

  SuccinctService_GetNumHosts_result() : success(0) {
  }

  virtual ~SuccinctService_GetNumHosts_result() throw() {}

  int32_t success;

  _SuccinctService_GetNumHosts_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_GetNumHosts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetNumHosts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumHosts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumHosts_presult__isset {
  _SuccinctService_GetNumHosts_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumHosts_presult__isset;

class SuccinctService_GetNumHosts_presult {
 public:


  virtual ~SuccinctService_GetNumHosts_presult() throw() {}

  int32_t* success;

  _SuccinctService_GetNumHosts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_GetNumShards_args__isset {
  _SuccinctService_GetNumShards_args__isset() : host_id(false) {}
  bool host_id;
} _SuccinctService_GetNumShards_args__isset;

class SuccinctService_GetNumShards_args {
 public:

  SuccinctService_GetNumShards_args() : host_id(0) {
  }

  virtual ~SuccinctService_GetNumShards_args() throw() {}

  int32_t host_id;

  _SuccinctService_GetNumShards_args__isset __isset;

  void __set_host_id(const int32_t val) {
    host_id = val;
  }

  bool operator == (const SuccinctService_GetNumShards_args & rhs) const
  {
    if (!(host_id == rhs.host_id))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetNumShards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumShards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_GetNumShards_pargs {
 public:


  virtual ~SuccinctService_GetNumShards_pargs() throw() {}

  const int32_t* host_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumShards_result__isset {
  _SuccinctService_GetNumShards_result__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumShards_result__isset;

class SuccinctService_GetNumShards_result {
 public:

  SuccinctService_GetNumShards_result() : success(0) {
  }

  virtual ~SuccinctService_GetNumShards_result() throw() {}

  int32_t success;

  _SuccinctService_GetNumShards_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_GetNumShards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetNumShards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumShards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumShards_presult__isset {
  _SuccinctService_GetNumShards_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumShards_presult__isset;

class SuccinctService_GetNumShards_presult {
 public:


  virtual ~SuccinctService_GetNumShards_presult() throw() {}

  int32_t* success;

  _SuccinctService_GetNumShards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SuccinctService_GetNumKeys_args__isset {
  _SuccinctService_GetNumKeys_args__isset() : shard_id(false) {}
  bool shard_id;
} _SuccinctService_GetNumKeys_args__isset;

class SuccinctService_GetNumKeys_args {
 public:

  SuccinctService_GetNumKeys_args() : shard_id(0) {
  }

  virtual ~SuccinctService_GetNumKeys_args() throw() {}

  int32_t shard_id;

  _SuccinctService_GetNumKeys_args__isset __isset;

  void __set_shard_id(const int32_t val) {
    shard_id = val;
  }

  bool operator == (const SuccinctService_GetNumKeys_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetNumKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_GetNumKeys_pargs {
 public:


  virtual ~SuccinctService_GetNumKeys_pargs() throw() {}

  const int32_t* shard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumKeys_result__isset {
  _SuccinctService_GetNumKeys_result__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumKeys_result__isset;

class SuccinctService_GetNumKeys_result {
 public:

  SuccinctService_GetNumKeys_result() : success(0) {
  }

  virtual ~SuccinctService_GetNumKeys_result() throw() {}

  int32_t success;

  _SuccinctService_GetNumKeys_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_GetNumKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetNumKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetNumKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetNumKeys_presult__isset {
  _SuccinctService_GetNumKeys_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_GetNumKeys_presult__isset;

class SuccinctService_GetNumKeys_presult {
 public:


  virtual ~SuccinctService_GetNumKeys_presult() throw() {}

  int32_t* success;

  _SuccinctService_GetNumKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SuccinctService_GetTotSize_args {
 public:

  SuccinctService_GetTotSize_args() {
  }

  virtual ~SuccinctService_GetTotSize_args() throw() {}


  bool operator == (const SuccinctService_GetTotSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SuccinctService_GetTotSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetTotSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SuccinctService_GetTotSize_pargs {
 public:


  virtual ~SuccinctService_GetTotSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetTotSize_result__isset {
  _SuccinctService_GetTotSize_result__isset() : success(false) {}
  bool success;
} _SuccinctService_GetTotSize_result__isset;

class SuccinctService_GetTotSize_result {
 public:

  SuccinctService_GetTotSize_result() : success(0) {
  }

  virtual ~SuccinctService_GetTotSize_result() throw() {}

  int64_t success;

  _SuccinctService_GetTotSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SuccinctService_GetTotSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SuccinctService_GetTotSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuccinctService_GetTotSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SuccinctService_GetTotSize_presult__isset {
  _SuccinctService_GetTotSize_presult__isset() : success(false) {}
  bool success;
} _SuccinctService_GetTotSize_presult__isset;

class SuccinctService_GetTotSize_presult {
 public:


  virtual ~SuccinctService_GetTotSize_presult() throw() {}

  int64_t* success;

  _SuccinctService_GetTotSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SuccinctServiceClient : virtual public SuccinctServiceIf {
 public:
  SuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SuccinctServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ConnectToHandlers();
  void send_ConnectToHandlers();
  int32_t recv_ConnectToHandlers();
  int32_t DisconnectFromHandlers();
  void send_DisconnectFromHandlers();
  int32_t recv_DisconnectFromHandlers();
  int32_t ConnectToLocalServers();
  void send_ConnectToLocalServers();
  int32_t recv_ConnectToLocalServers();
  int32_t DisconnectFromLocalServers();
  void send_DisconnectFromLocalServers();
  int32_t recv_DisconnectFromLocalServers();
  int32_t StartLocalServers();
  void send_StartLocalServers();
  int32_t recv_StartLocalServers();
  int32_t Initialize(const int32_t mode);
  void send_Initialize(const int32_t mode);
  int32_t recv_Initialize();
  void Get(std::string& _return, const int64_t key);
  void send_Get(const int64_t key);
  void recv_Get(std::string& _return);
  void GetLocal(std::string& _return, const int32_t qserver_id, const int64_t key);
  void send_GetLocal(const int32_t qserver_id, const int64_t key);
  void recv_GetLocal(std::string& _return);
  void Access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len);
  void send_Access(const int64_t key, const int32_t offset, const int32_t len);
  void recv_Access(std::string& _return);
  void AccessLocal(std::string& _return, const int32_t qserver_id, const int64_t key, const int32_t offset, const int32_t len);
  void send_AccessLocal(const int32_t qserver_id, const int64_t key, const int32_t offset, const int32_t len);
  void recv_AccessLocal(std::string& _return);
  void Search(std::set<int64_t> & _return, const std::string& query);
  void send_Search(const std::string& query);
  void recv_Search(std::set<int64_t> & _return);
  void SearchLocal(std::set<int64_t> & _return, const std::string& query);
  void send_SearchLocal(const std::string& query);
  void recv_SearchLocal(std::set<int64_t> & _return);
  void RegexSearch(std::set<int64_t> & _return, const std::string& query);
  void send_RegexSearch(const std::string& query);
  void recv_RegexSearch(std::set<int64_t> & _return);
  void RegexSearchLocal(std::set<int64_t> & _return, const std::string& query);
  void send_RegexSearchLocal(const std::string& query);
  void recv_RegexSearchLocal(std::set<int64_t> & _return);
  void RegexCount(std::vector<int64_t> & _return, const std::string& query);
  void send_RegexCount(const std::string& query);
  void recv_RegexCount(std::vector<int64_t> & _return);
  void RegexCountLocal(std::vector<int64_t> & _return, const std::string& query);
  void send_RegexCountLocal(const std::string& query);
  void recv_RegexCountLocal(std::vector<int64_t> & _return);
  int64_t Count(const std::string& query);
  void send_Count(const std::string& query);
  int64_t recv_Count();
  int64_t CountLocal(const std::string& query);
  void send_CountLocal(const std::string& query);
  int64_t recv_CountLocal();
  void FlatExtract(std::string& _return, const int64_t offset, const int64_t length);
  void send_FlatExtract(const int64_t offset, const int64_t length);
  void recv_FlatExtract(std::string& _return);
  void FlatExtractLocal(std::string& _return, const int64_t offset, const int64_t length);
  void send_FlatExtractLocal(const int64_t offset, const int64_t length);
  void recv_FlatExtractLocal(std::string& _return);
  int64_t FlatCount(const std::string& query);
  void send_FlatCount(const std::string& query);
  int64_t recv_FlatCount();
  int64_t FlatCountLocal(const std::string& query);
  void send_FlatCountLocal(const std::string& query);
  int64_t recv_FlatCountLocal();
  void FlatSearch(std::vector<int64_t> & _return, const std::string& query);
  void send_FlatSearch(const std::string& query);
  void recv_FlatSearch(std::vector<int64_t> & _return);
  void FlatSearchLocal(std::vector<int64_t> & _return, const std::string& query);
  void send_FlatSearchLocal(const std::string& query);
  void recv_FlatSearchLocal(std::vector<int64_t> & _return);
  int32_t GetNumHosts();
  void send_GetNumHosts();
  int32_t recv_GetNumHosts();
  int32_t GetNumShards(const int32_t host_id);
  void send_GetNumShards(const int32_t host_id);
  int32_t recv_GetNumShards();
  int32_t GetNumKeys(const int32_t shard_id);
  void send_GetNumKeys(const int32_t shard_id);
  int32_t recv_GetNumKeys();
  int64_t GetTotSize();
  void send_GetTotSize();
  int64_t recv_GetTotSize();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SuccinctServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SuccinctServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SuccinctServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ConnectToHandlers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisconnectFromHandlers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConnectToLocalServers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisconnectFromLocalServers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartLocalServers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AccessLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SearchLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegexSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegexSearchLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegexCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegexCountLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CountLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatExtract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatExtractLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatCountLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FlatSearchLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumHosts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumShards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTotSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SuccinctServiceProcessor(boost::shared_ptr<SuccinctServiceIf> iface) :
    iface_(iface) {
    processMap_["ConnectToHandlers"] = &SuccinctServiceProcessor::process_ConnectToHandlers;
    processMap_["DisconnectFromHandlers"] = &SuccinctServiceProcessor::process_DisconnectFromHandlers;
    processMap_["ConnectToLocalServers"] = &SuccinctServiceProcessor::process_ConnectToLocalServers;
    processMap_["DisconnectFromLocalServers"] = &SuccinctServiceProcessor::process_DisconnectFromLocalServers;
    processMap_["StartLocalServers"] = &SuccinctServiceProcessor::process_StartLocalServers;
    processMap_["Initialize"] = &SuccinctServiceProcessor::process_Initialize;
    processMap_["Get"] = &SuccinctServiceProcessor::process_Get;
    processMap_["GetLocal"] = &SuccinctServiceProcessor::process_GetLocal;
    processMap_["Access"] = &SuccinctServiceProcessor::process_Access;
    processMap_["AccessLocal"] = &SuccinctServiceProcessor::process_AccessLocal;
    processMap_["Search"] = &SuccinctServiceProcessor::process_Search;
    processMap_["SearchLocal"] = &SuccinctServiceProcessor::process_SearchLocal;
    processMap_["RegexSearch"] = &SuccinctServiceProcessor::process_RegexSearch;
    processMap_["RegexSearchLocal"] = &SuccinctServiceProcessor::process_RegexSearchLocal;
    processMap_["RegexCount"] = &SuccinctServiceProcessor::process_RegexCount;
    processMap_["RegexCountLocal"] = &SuccinctServiceProcessor::process_RegexCountLocal;
    processMap_["Count"] = &SuccinctServiceProcessor::process_Count;
    processMap_["CountLocal"] = &SuccinctServiceProcessor::process_CountLocal;
    processMap_["FlatExtract"] = &SuccinctServiceProcessor::process_FlatExtract;
    processMap_["FlatExtractLocal"] = &SuccinctServiceProcessor::process_FlatExtractLocal;
    processMap_["FlatCount"] = &SuccinctServiceProcessor::process_FlatCount;
    processMap_["FlatCountLocal"] = &SuccinctServiceProcessor::process_FlatCountLocal;
    processMap_["FlatSearch"] = &SuccinctServiceProcessor::process_FlatSearch;
    processMap_["FlatSearchLocal"] = &SuccinctServiceProcessor::process_FlatSearchLocal;
    processMap_["GetNumHosts"] = &SuccinctServiceProcessor::process_GetNumHosts;
    processMap_["GetNumShards"] = &SuccinctServiceProcessor::process_GetNumShards;
    processMap_["GetNumKeys"] = &SuccinctServiceProcessor::process_GetNumKeys;
    processMap_["GetTotSize"] = &SuccinctServiceProcessor::process_GetTotSize;
  }

  virtual ~SuccinctServiceProcessor() {}
};

class SuccinctServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SuccinctServiceProcessorFactory(const ::boost::shared_ptr< SuccinctServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SuccinctServiceIfFactory > handlerFactory_;
};

class SuccinctServiceMultiface : virtual public SuccinctServiceIf {
 public:
  SuccinctServiceMultiface(std::vector<boost::shared_ptr<SuccinctServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SuccinctServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SuccinctServiceIf> > ifaces_;
  SuccinctServiceMultiface() {}
  void add(boost::shared_ptr<SuccinctServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ConnectToHandlers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectToHandlers();
    }
    return ifaces_[i]->ConnectToHandlers();
  }

  int32_t DisconnectFromHandlers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisconnectFromHandlers();
    }
    return ifaces_[i]->DisconnectFromHandlers();
  }

  int32_t ConnectToLocalServers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectToLocalServers();
    }
    return ifaces_[i]->ConnectToLocalServers();
  }

  int32_t DisconnectFromLocalServers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisconnectFromLocalServers();
    }
    return ifaces_[i]->DisconnectFromLocalServers();
  }

  int32_t StartLocalServers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartLocalServers();
    }
    return ifaces_[i]->StartLocalServers();
  }

  int32_t Initialize(const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Initialize(mode);
    }
    return ifaces_[i]->Initialize(mode);
  }

  void Get(std::string& _return, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, key);
    }
    ifaces_[i]->Get(_return, key);
    return;
  }

  void GetLocal(std::string& _return, const int32_t qserver_id, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLocal(_return, qserver_id, key);
    }
    ifaces_[i]->GetLocal(_return, qserver_id, key);
    return;
  }

  void Access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Access(_return, key, offset, len);
    }
    ifaces_[i]->Access(_return, key, offset, len);
    return;
  }

  void AccessLocal(std::string& _return, const int32_t qserver_id, const int64_t key, const int32_t offset, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AccessLocal(_return, qserver_id, key, offset, len);
    }
    ifaces_[i]->AccessLocal(_return, qserver_id, key, offset, len);
    return;
  }

  void Search(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Search(_return, query);
    }
    ifaces_[i]->Search(_return, query);
    return;
  }

  void SearchLocal(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SearchLocal(_return, query);
    }
    ifaces_[i]->SearchLocal(_return, query);
    return;
  }

  void RegexSearch(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegexSearch(_return, query);
    }
    ifaces_[i]->RegexSearch(_return, query);
    return;
  }

  void RegexSearchLocal(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegexSearchLocal(_return, query);
    }
    ifaces_[i]->RegexSearchLocal(_return, query);
    return;
  }

  void RegexCount(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegexCount(_return, query);
    }
    ifaces_[i]->RegexCount(_return, query);
    return;
  }

  void RegexCountLocal(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegexCountLocal(_return, query);
    }
    ifaces_[i]->RegexCountLocal(_return, query);
    return;
  }

  int64_t Count(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Count(query);
    }
    return ifaces_[i]->Count(query);
  }

  int64_t CountLocal(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CountLocal(query);
    }
    return ifaces_[i]->CountLocal(query);
  }

  void FlatExtract(std::string& _return, const int64_t offset, const int64_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatExtract(_return, offset, length);
    }
    ifaces_[i]->FlatExtract(_return, offset, length);
    return;
  }

  void FlatExtractLocal(std::string& _return, const int64_t offset, const int64_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatExtractLocal(_return, offset, length);
    }
    ifaces_[i]->FlatExtractLocal(_return, offset, length);
    return;
  }

  int64_t FlatCount(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatCount(query);
    }
    return ifaces_[i]->FlatCount(query);
  }

  int64_t FlatCountLocal(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatCountLocal(query);
    }
    return ifaces_[i]->FlatCountLocal(query);
  }

  void FlatSearch(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatSearch(_return, query);
    }
    ifaces_[i]->FlatSearch(_return, query);
    return;
  }

  void FlatSearchLocal(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FlatSearchLocal(_return, query);
    }
    ifaces_[i]->FlatSearchLocal(_return, query);
    return;
  }

  int32_t GetNumHosts() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNumHosts();
    }
    return ifaces_[i]->GetNumHosts();
  }

  int32_t GetNumShards(const int32_t host_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNumShards(host_id);
    }
    return ifaces_[i]->GetNumShards(host_id);
  }

  int32_t GetNumKeys(const int32_t shard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNumKeys(shard_id);
    }
    return ifaces_[i]->GetNumKeys(shard_id);
  }

  int64_t GetTotSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTotSize();
    }
    return ifaces_[i]->GetTotSize();
  }

};



#endif

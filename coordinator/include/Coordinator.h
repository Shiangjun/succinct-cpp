/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Coordinator_H
#define Coordinator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "coordinator_types.h"

namespace succinct {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CoordinatorIf {
 public:
  virtual ~CoordinatorIf() {}
  virtual void GetHostname(std::string& _return) = 0;
  virtual void Ping(const  ::HeartBeat& hb) = 0;
};

class CoordinatorIfFactory {
 public:
  typedef CoordinatorIf Handler;

  virtual ~CoordinatorIfFactory() {}

  virtual CoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CoordinatorIf* /* handler */) = 0;
};

class CoordinatorIfSingletonFactory : virtual public CoordinatorIfFactory {
 public:
  CoordinatorIfSingletonFactory(const boost::shared_ptr<CoordinatorIf>& iface) : iface_(iface) {}
  virtual ~CoordinatorIfSingletonFactory() {}

  virtual CoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CoordinatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CoordinatorIf> iface_;
};

class CoordinatorNull : virtual public CoordinatorIf {
 public:
  virtual ~CoordinatorNull() {}
  void GetHostname(std::string& /* _return */) {
    return;
  }
  void Ping(const  ::HeartBeat& /* hb */) {
    return;
  }
};


class Coordinator_GetHostname_args {
 public:

  Coordinator_GetHostname_args(const Coordinator_GetHostname_args&);
  Coordinator_GetHostname_args& operator=(const Coordinator_GetHostname_args&);
  Coordinator_GetHostname_args() {
  }

  virtual ~Coordinator_GetHostname_args() throw();

  bool operator == (const Coordinator_GetHostname_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Coordinator_GetHostname_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_GetHostname_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_GetHostname_pargs {
 public:


  virtual ~Coordinator_GetHostname_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_GetHostname_result__isset {
  _Coordinator_GetHostname_result__isset() : success(false) {}
  bool success :1;
} _Coordinator_GetHostname_result__isset;

class Coordinator_GetHostname_result {
 public:

  Coordinator_GetHostname_result(const Coordinator_GetHostname_result&);
  Coordinator_GetHostname_result& operator=(const Coordinator_GetHostname_result&);
  Coordinator_GetHostname_result() : success() {
  }

  virtual ~Coordinator_GetHostname_result() throw();
  std::string success;

  _Coordinator_GetHostname_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Coordinator_GetHostname_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Coordinator_GetHostname_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_GetHostname_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Coordinator_GetHostname_presult__isset {
  _Coordinator_GetHostname_presult__isset() : success(false) {}
  bool success :1;
} _Coordinator_GetHostname_presult__isset;

class Coordinator_GetHostname_presult {
 public:


  virtual ~Coordinator_GetHostname_presult() throw();
  std::string* success;

  _Coordinator_GetHostname_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Coordinator_Ping_args__isset {
  _Coordinator_Ping_args__isset() : hb(false) {}
  bool hb :1;
} _Coordinator_Ping_args__isset;

class Coordinator_Ping_args {
 public:

  Coordinator_Ping_args(const Coordinator_Ping_args&);
  Coordinator_Ping_args& operator=(const Coordinator_Ping_args&);
  Coordinator_Ping_args() {
  }

  virtual ~Coordinator_Ping_args() throw();
   ::HeartBeat hb;

  _Coordinator_Ping_args__isset __isset;

  void __set_hb(const  ::HeartBeat& val);

  bool operator == (const Coordinator_Ping_args & rhs) const
  {
    if (!(hb == rhs.hb))
      return false;
    return true;
  }
  bool operator != (const Coordinator_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_Ping_pargs {
 public:


  virtual ~Coordinator_Ping_pargs() throw();
  const  ::HeartBeat* hb;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_Ping_result {
 public:

  Coordinator_Ping_result(const Coordinator_Ping_result&);
  Coordinator_Ping_result& operator=(const Coordinator_Ping_result&);
  Coordinator_Ping_result() {
  }

  virtual ~Coordinator_Ping_result() throw();

  bool operator == (const Coordinator_Ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Coordinator_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinator_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Coordinator_Ping_presult {
 public:


  virtual ~Coordinator_Ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CoordinatorClient : virtual public CoordinatorIf {
 public:
  CoordinatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CoordinatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetHostname(std::string& _return);
  void send_GetHostname();
  void recv_GetHostname(std::string& _return);
  void Ping(const  ::HeartBeat& hb);
  void send_Ping(const  ::HeartBeat& hb);
  void recv_Ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CoordinatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CoordinatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CoordinatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetHostname(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CoordinatorProcessor(boost::shared_ptr<CoordinatorIf> iface) :
    iface_(iface) {
    processMap_["GetHostname"] = &CoordinatorProcessor::process_GetHostname;
    processMap_["Ping"] = &CoordinatorProcessor::process_Ping;
  }

  virtual ~CoordinatorProcessor() {}
};

class CoordinatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CoordinatorProcessorFactory(const ::boost::shared_ptr< CoordinatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CoordinatorIfFactory > handlerFactory_;
};

class CoordinatorMultiface : virtual public CoordinatorIf {
 public:
  CoordinatorMultiface(std::vector<boost::shared_ptr<CoordinatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CoordinatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CoordinatorIf> > ifaces_;
  CoordinatorMultiface() {}
  void add(boost::shared_ptr<CoordinatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetHostname(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHostname(_return);
    }
    ifaces_[i]->GetHostname(_return);
    return;
  }

  void Ping(const  ::HeartBeat& hb) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping(hb);
    }
    ifaces_[i]->Ping(hb);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CoordinatorConcurrentClient : virtual public CoordinatorIf {
 public:
  CoordinatorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CoordinatorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetHostname(std::string& _return);
  int32_t send_GetHostname();
  void recv_GetHostname(std::string& _return, const int32_t seqid);
  void Ping(const  ::HeartBeat& hb);
  int32_t send_Ping(const  ::HeartBeat& hb);
  void recv_Ping(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif

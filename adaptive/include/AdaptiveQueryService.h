/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdaptiveQueryService_H
#define AdaptiveQueryService_H

#include <thrift/TDispatchProcessor.h>
#include "adaptive_types.h"



class AdaptiveQueryServiceIf {
 public:
  virtual ~AdaptiveQueryServiceIf() {}
  virtual int32_t init(const int32_t id) = 0;
  virtual void get(std::string& _return, const int64_t key) = 0;
  virtual void batch_get(std::vector<std::string> & _return, const std::vector<int64_t> & keys) = 0;
  virtual void access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len) = 0;
  virtual void batch_access(std::vector<std::string> & _return, const std::vector<int64_t> & keys, const int32_t offset, const int32_t len) = 0;
  virtual void search(std::set<int64_t> & _return, const std::string& query) = 0;
  virtual int64_t count(const std::string& query) = 0;
  virtual int32_t get_num_keys() = 0;
  virtual int64_t remove_layer(const int32_t layer_id) = 0;
  virtual int64_t reconstruct_layer(const int32_t layer_id) = 0;
  virtual int64_t storage_size() = 0;
  virtual int64_t num_sampled_values() = 0;
};

class AdaptiveQueryServiceIfFactory {
 public:
  typedef AdaptiveQueryServiceIf Handler;

  virtual ~AdaptiveQueryServiceIfFactory() {}

  virtual AdaptiveQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdaptiveQueryServiceIf* /* handler */) = 0;
};

class AdaptiveQueryServiceIfSingletonFactory : virtual public AdaptiveQueryServiceIfFactory {
 public:
  AdaptiveQueryServiceIfSingletonFactory(const boost::shared_ptr<AdaptiveQueryServiceIf>& iface) : iface_(iface) {}
  virtual ~AdaptiveQueryServiceIfSingletonFactory() {}

  virtual AdaptiveQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdaptiveQueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdaptiveQueryServiceIf> iface_;
};

class AdaptiveQueryServiceNull : virtual public AdaptiveQueryServiceIf {
 public:
  virtual ~AdaptiveQueryServiceNull() {}
  int32_t init(const int32_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  void get(std::string& /* _return */, const int64_t /* key */) {
    return;
  }
  void batch_get(std::vector<std::string> & /* _return */, const std::vector<int64_t> & /* keys */) {
    return;
  }
  void access(std::string& /* _return */, const int64_t /* key */, const int32_t /* offset */, const int32_t /* len */) {
    return;
  }
  void batch_access(std::vector<std::string> & /* _return */, const std::vector<int64_t> & /* keys */, const int32_t /* offset */, const int32_t /* len */) {
    return;
  }
  void search(std::set<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  int64_t count(const std::string& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  int32_t get_num_keys() {
    int32_t _return = 0;
    return _return;
  }
  int64_t remove_layer(const int32_t /* layer_id */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t reconstruct_layer(const int32_t /* layer_id */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t storage_size() {
    int64_t _return = 0;
    return _return;
  }
  int64_t num_sampled_values() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _AdaptiveQueryService_init_args__isset {
  _AdaptiveQueryService_init_args__isset() : id(false) {}
  bool id;
} _AdaptiveQueryService_init_args__isset;

class AdaptiveQueryService_init_args {
 public:

  AdaptiveQueryService_init_args() : id(0) {
  }

  virtual ~AdaptiveQueryService_init_args() throw() {}

  int32_t id;

  _AdaptiveQueryService_init_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const AdaptiveQueryService_init_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_init_pargs {
 public:


  virtual ~AdaptiveQueryService_init_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_init_result__isset {
  _AdaptiveQueryService_init_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_init_result__isset;

class AdaptiveQueryService_init_result {
 public:

  AdaptiveQueryService_init_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_init_result() throw() {}

  int32_t success;

  _AdaptiveQueryService_init_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_init_presult__isset {
  _AdaptiveQueryService_init_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_init_presult__isset;

class AdaptiveQueryService_init_presult {
 public:


  virtual ~AdaptiveQueryService_init_presult() throw() {}

  int32_t* success;

  _AdaptiveQueryService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_get_args__isset {
  _AdaptiveQueryService_get_args__isset() : key(false) {}
  bool key;
} _AdaptiveQueryService_get_args__isset;

class AdaptiveQueryService_get_args {
 public:

  AdaptiveQueryService_get_args() : key(0) {
  }

  virtual ~AdaptiveQueryService_get_args() throw() {}

  int64_t key;

  _AdaptiveQueryService_get_args__isset __isset;

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const AdaptiveQueryService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_get_pargs {
 public:


  virtual ~AdaptiveQueryService_get_pargs() throw() {}

  const int64_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_get_result__isset {
  _AdaptiveQueryService_get_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_get_result__isset;

class AdaptiveQueryService_get_result {
 public:

  AdaptiveQueryService_get_result() : success() {
  }

  virtual ~AdaptiveQueryService_get_result() throw() {}

  std::string success;

  _AdaptiveQueryService_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_get_presult__isset {
  _AdaptiveQueryService_get_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_get_presult__isset;

class AdaptiveQueryService_get_presult {
 public:


  virtual ~AdaptiveQueryService_get_presult() throw() {}

  std::string* success;

  _AdaptiveQueryService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_batch_get_args__isset {
  _AdaptiveQueryService_batch_get_args__isset() : keys(false) {}
  bool keys;
} _AdaptiveQueryService_batch_get_args__isset;

class AdaptiveQueryService_batch_get_args {
 public:

  AdaptiveQueryService_batch_get_args() {
  }

  virtual ~AdaptiveQueryService_batch_get_args() throw() {}

  std::vector<int64_t>  keys;

  _AdaptiveQueryService_batch_get_args__isset __isset;

  void __set_keys(const std::vector<int64_t> & val) {
    keys = val;
  }

  bool operator == (const AdaptiveQueryService_batch_get_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_batch_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_batch_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_batch_get_pargs {
 public:


  virtual ~AdaptiveQueryService_batch_get_pargs() throw() {}

  const std::vector<int64_t> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_batch_get_result__isset {
  _AdaptiveQueryService_batch_get_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_batch_get_result__isset;

class AdaptiveQueryService_batch_get_result {
 public:

  AdaptiveQueryService_batch_get_result() {
  }

  virtual ~AdaptiveQueryService_batch_get_result() throw() {}

  std::vector<std::string>  success;

  _AdaptiveQueryService_batch_get_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_batch_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_batch_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_batch_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_batch_get_presult__isset {
  _AdaptiveQueryService_batch_get_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_batch_get_presult__isset;

class AdaptiveQueryService_batch_get_presult {
 public:


  virtual ~AdaptiveQueryService_batch_get_presult() throw() {}

  std::vector<std::string> * success;

  _AdaptiveQueryService_batch_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_access_args__isset {
  _AdaptiveQueryService_access_args__isset() : key(false), offset(false), len(false) {}
  bool key;
  bool offset;
  bool len;
} _AdaptiveQueryService_access_args__isset;

class AdaptiveQueryService_access_args {
 public:

  AdaptiveQueryService_access_args() : key(0), offset(0), len(0) {
  }

  virtual ~AdaptiveQueryService_access_args() throw() {}

  int64_t key;
  int32_t offset;
  int32_t len;

  _AdaptiveQueryService_access_args__isset __isset;

  void __set_key(const int64_t val) {
    key = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const AdaptiveQueryService_access_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_access_pargs {
 public:


  virtual ~AdaptiveQueryService_access_pargs() throw() {}

  const int64_t* key;
  const int32_t* offset;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_access_result__isset {
  _AdaptiveQueryService_access_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_access_result__isset;

class AdaptiveQueryService_access_result {
 public:

  AdaptiveQueryService_access_result() : success() {
  }

  virtual ~AdaptiveQueryService_access_result() throw() {}

  std::string success;

  _AdaptiveQueryService_access_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_access_presult__isset {
  _AdaptiveQueryService_access_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_access_presult__isset;

class AdaptiveQueryService_access_presult {
 public:


  virtual ~AdaptiveQueryService_access_presult() throw() {}

  std::string* success;

  _AdaptiveQueryService_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_batch_access_args__isset {
  _AdaptiveQueryService_batch_access_args__isset() : keys(false), offset(false), len(false) {}
  bool keys;
  bool offset;
  bool len;
} _AdaptiveQueryService_batch_access_args__isset;

class AdaptiveQueryService_batch_access_args {
 public:

  AdaptiveQueryService_batch_access_args() : offset(0), len(0) {
  }

  virtual ~AdaptiveQueryService_batch_access_args() throw() {}

  std::vector<int64_t>  keys;
  int32_t offset;
  int32_t len;

  _AdaptiveQueryService_batch_access_args__isset __isset;

  void __set_keys(const std::vector<int64_t> & val) {
    keys = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const AdaptiveQueryService_batch_access_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_batch_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_batch_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_batch_access_pargs {
 public:


  virtual ~AdaptiveQueryService_batch_access_pargs() throw() {}

  const std::vector<int64_t> * keys;
  const int32_t* offset;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_batch_access_result__isset {
  _AdaptiveQueryService_batch_access_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_batch_access_result__isset;

class AdaptiveQueryService_batch_access_result {
 public:

  AdaptiveQueryService_batch_access_result() {
  }

  virtual ~AdaptiveQueryService_batch_access_result() throw() {}

  std::vector<std::string>  success;

  _AdaptiveQueryService_batch_access_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_batch_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_batch_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_batch_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_batch_access_presult__isset {
  _AdaptiveQueryService_batch_access_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_batch_access_presult__isset;

class AdaptiveQueryService_batch_access_presult {
 public:


  virtual ~AdaptiveQueryService_batch_access_presult() throw() {}

  std::vector<std::string> * success;

  _AdaptiveQueryService_batch_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_search_args__isset {
  _AdaptiveQueryService_search_args__isset() : query(false) {}
  bool query;
} _AdaptiveQueryService_search_args__isset;

class AdaptiveQueryService_search_args {
 public:

  AdaptiveQueryService_search_args() : query() {
  }

  virtual ~AdaptiveQueryService_search_args() throw() {}

  std::string query;

  _AdaptiveQueryService_search_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const AdaptiveQueryService_search_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_search_pargs {
 public:


  virtual ~AdaptiveQueryService_search_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_search_result__isset {
  _AdaptiveQueryService_search_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_search_result__isset;

class AdaptiveQueryService_search_result {
 public:

  AdaptiveQueryService_search_result() {
  }

  virtual ~AdaptiveQueryService_search_result() throw() {}

  std::set<int64_t>  success;

  _AdaptiveQueryService_search_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_search_presult__isset {
  _AdaptiveQueryService_search_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_search_presult__isset;

class AdaptiveQueryService_search_presult {
 public:


  virtual ~AdaptiveQueryService_search_presult() throw() {}

  std::set<int64_t> * success;

  _AdaptiveQueryService_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_count_args__isset {
  _AdaptiveQueryService_count_args__isset() : query(false) {}
  bool query;
} _AdaptiveQueryService_count_args__isset;

class AdaptiveQueryService_count_args {
 public:

  AdaptiveQueryService_count_args() : query() {
  }

  virtual ~AdaptiveQueryService_count_args() throw() {}

  std::string query;

  _AdaptiveQueryService_count_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const AdaptiveQueryService_count_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_count_pargs {
 public:


  virtual ~AdaptiveQueryService_count_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_count_result__isset {
  _AdaptiveQueryService_count_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_count_result__isset;

class AdaptiveQueryService_count_result {
 public:

  AdaptiveQueryService_count_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_count_result() throw() {}

  int64_t success;

  _AdaptiveQueryService_count_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_count_presult__isset {
  _AdaptiveQueryService_count_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_count_presult__isset;

class AdaptiveQueryService_count_presult {
 public:


  virtual ~AdaptiveQueryService_count_presult() throw() {}

  int64_t* success;

  _AdaptiveQueryService_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdaptiveQueryService_get_num_keys_args {
 public:

  AdaptiveQueryService_get_num_keys_args() {
  }

  virtual ~AdaptiveQueryService_get_num_keys_args() throw() {}


  bool operator == (const AdaptiveQueryService_get_num_keys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdaptiveQueryService_get_num_keys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_get_num_keys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_get_num_keys_pargs {
 public:


  virtual ~AdaptiveQueryService_get_num_keys_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_get_num_keys_result__isset {
  _AdaptiveQueryService_get_num_keys_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_get_num_keys_result__isset;

class AdaptiveQueryService_get_num_keys_result {
 public:

  AdaptiveQueryService_get_num_keys_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_get_num_keys_result() throw() {}

  int32_t success;

  _AdaptiveQueryService_get_num_keys_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_get_num_keys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_get_num_keys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_get_num_keys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_get_num_keys_presult__isset {
  _AdaptiveQueryService_get_num_keys_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_get_num_keys_presult__isset;

class AdaptiveQueryService_get_num_keys_presult {
 public:


  virtual ~AdaptiveQueryService_get_num_keys_presult() throw() {}

  int32_t* success;

  _AdaptiveQueryService_get_num_keys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_remove_layer_args__isset {
  _AdaptiveQueryService_remove_layer_args__isset() : layer_id(false) {}
  bool layer_id;
} _AdaptiveQueryService_remove_layer_args__isset;

class AdaptiveQueryService_remove_layer_args {
 public:

  AdaptiveQueryService_remove_layer_args() : layer_id(0) {
  }

  virtual ~AdaptiveQueryService_remove_layer_args() throw() {}

  int32_t layer_id;

  _AdaptiveQueryService_remove_layer_args__isset __isset;

  void __set_layer_id(const int32_t val) {
    layer_id = val;
  }

  bool operator == (const AdaptiveQueryService_remove_layer_args & rhs) const
  {
    if (!(layer_id == rhs.layer_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_remove_layer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_remove_layer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_remove_layer_pargs {
 public:


  virtual ~AdaptiveQueryService_remove_layer_pargs() throw() {}

  const int32_t* layer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_remove_layer_result__isset {
  _AdaptiveQueryService_remove_layer_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_remove_layer_result__isset;

class AdaptiveQueryService_remove_layer_result {
 public:

  AdaptiveQueryService_remove_layer_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_remove_layer_result() throw() {}

  int64_t success;

  _AdaptiveQueryService_remove_layer_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_remove_layer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_remove_layer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_remove_layer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_remove_layer_presult__isset {
  _AdaptiveQueryService_remove_layer_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_remove_layer_presult__isset;

class AdaptiveQueryService_remove_layer_presult {
 public:


  virtual ~AdaptiveQueryService_remove_layer_presult() throw() {}

  int64_t* success;

  _AdaptiveQueryService_remove_layer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdaptiveQueryService_reconstruct_layer_args__isset {
  _AdaptiveQueryService_reconstruct_layer_args__isset() : layer_id(false) {}
  bool layer_id;
} _AdaptiveQueryService_reconstruct_layer_args__isset;

class AdaptiveQueryService_reconstruct_layer_args {
 public:

  AdaptiveQueryService_reconstruct_layer_args() : layer_id(0) {
  }

  virtual ~AdaptiveQueryService_reconstruct_layer_args() throw() {}

  int32_t layer_id;

  _AdaptiveQueryService_reconstruct_layer_args__isset __isset;

  void __set_layer_id(const int32_t val) {
    layer_id = val;
  }

  bool operator == (const AdaptiveQueryService_reconstruct_layer_args & rhs) const
  {
    if (!(layer_id == rhs.layer_id))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_reconstruct_layer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_reconstruct_layer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_reconstruct_layer_pargs {
 public:


  virtual ~AdaptiveQueryService_reconstruct_layer_pargs() throw() {}

  const int32_t* layer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_reconstruct_layer_result__isset {
  _AdaptiveQueryService_reconstruct_layer_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_reconstruct_layer_result__isset;

class AdaptiveQueryService_reconstruct_layer_result {
 public:

  AdaptiveQueryService_reconstruct_layer_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_reconstruct_layer_result() throw() {}

  int64_t success;

  _AdaptiveQueryService_reconstruct_layer_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_reconstruct_layer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_reconstruct_layer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_reconstruct_layer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_reconstruct_layer_presult__isset {
  _AdaptiveQueryService_reconstruct_layer_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_reconstruct_layer_presult__isset;

class AdaptiveQueryService_reconstruct_layer_presult {
 public:


  virtual ~AdaptiveQueryService_reconstruct_layer_presult() throw() {}

  int64_t* success;

  _AdaptiveQueryService_reconstruct_layer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdaptiveQueryService_storage_size_args {
 public:

  AdaptiveQueryService_storage_size_args() {
  }

  virtual ~AdaptiveQueryService_storage_size_args() throw() {}


  bool operator == (const AdaptiveQueryService_storage_size_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdaptiveQueryService_storage_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_storage_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_storage_size_pargs {
 public:


  virtual ~AdaptiveQueryService_storage_size_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_storage_size_result__isset {
  _AdaptiveQueryService_storage_size_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_storage_size_result__isset;

class AdaptiveQueryService_storage_size_result {
 public:

  AdaptiveQueryService_storage_size_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_storage_size_result() throw() {}

  int64_t success;

  _AdaptiveQueryService_storage_size_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_storage_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_storage_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_storage_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_storage_size_presult__isset {
  _AdaptiveQueryService_storage_size_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_storage_size_presult__isset;

class AdaptiveQueryService_storage_size_presult {
 public:


  virtual ~AdaptiveQueryService_storage_size_presult() throw() {}

  int64_t* success;

  _AdaptiveQueryService_storage_size_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdaptiveQueryService_num_sampled_values_args {
 public:

  AdaptiveQueryService_num_sampled_values_args() {
  }

  virtual ~AdaptiveQueryService_num_sampled_values_args() throw() {}


  bool operator == (const AdaptiveQueryService_num_sampled_values_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdaptiveQueryService_num_sampled_values_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_num_sampled_values_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdaptiveQueryService_num_sampled_values_pargs {
 public:


  virtual ~AdaptiveQueryService_num_sampled_values_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_num_sampled_values_result__isset {
  _AdaptiveQueryService_num_sampled_values_result__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_num_sampled_values_result__isset;

class AdaptiveQueryService_num_sampled_values_result {
 public:

  AdaptiveQueryService_num_sampled_values_result() : success(0) {
  }

  virtual ~AdaptiveQueryService_num_sampled_values_result() throw() {}

  int64_t success;

  _AdaptiveQueryService_num_sampled_values_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AdaptiveQueryService_num_sampled_values_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdaptiveQueryService_num_sampled_values_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdaptiveQueryService_num_sampled_values_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdaptiveQueryService_num_sampled_values_presult__isset {
  _AdaptiveQueryService_num_sampled_values_presult__isset() : success(false) {}
  bool success;
} _AdaptiveQueryService_num_sampled_values_presult__isset;

class AdaptiveQueryService_num_sampled_values_presult {
 public:


  virtual ~AdaptiveQueryService_num_sampled_values_presult() throw() {}

  int64_t* success;

  _AdaptiveQueryService_num_sampled_values_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdaptiveQueryServiceClient : virtual public AdaptiveQueryServiceIf {
 public:
  AdaptiveQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AdaptiveQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t init(const int32_t id);
  void send_init(const int32_t id);
  int32_t recv_init();
  void get(std::string& _return, const int64_t key);
  void send_get(const int64_t key);
  void recv_get(std::string& _return);
  void batch_get(std::vector<std::string> & _return, const std::vector<int64_t> & keys);
  void send_batch_get(const std::vector<int64_t> & keys);
  void recv_batch_get(std::vector<std::string> & _return);
  void access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len);
  void send_access(const int64_t key, const int32_t offset, const int32_t len);
  void recv_access(std::string& _return);
  void batch_access(std::vector<std::string> & _return, const std::vector<int64_t> & keys, const int32_t offset, const int32_t len);
  void send_batch_access(const std::vector<int64_t> & keys, const int32_t offset, const int32_t len);
  void recv_batch_access(std::vector<std::string> & _return);
  void search(std::set<int64_t> & _return, const std::string& query);
  void send_search(const std::string& query);
  void recv_search(std::set<int64_t> & _return);
  int64_t count(const std::string& query);
  void send_count(const std::string& query);
  int64_t recv_count();
  int32_t get_num_keys();
  void send_get_num_keys();
  int32_t recv_get_num_keys();
  int64_t remove_layer(const int32_t layer_id);
  void send_remove_layer(const int32_t layer_id);
  int64_t recv_remove_layer();
  int64_t reconstruct_layer(const int32_t layer_id);
  void send_reconstruct_layer(const int32_t layer_id);
  int64_t recv_reconstruct_layer();
  int64_t storage_size();
  void send_storage_size();
  int64_t recv_storage_size();
  int64_t num_sampled_values();
  void send_num_sampled_values();
  int64_t recv_num_sampled_values();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdaptiveQueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdaptiveQueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdaptiveQueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_num_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_layer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reconstruct_layer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storage_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_sampled_values(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdaptiveQueryServiceProcessor(boost::shared_ptr<AdaptiveQueryServiceIf> iface) :
    iface_(iface) {
    processMap_["init"] = &AdaptiveQueryServiceProcessor::process_init;
    processMap_["get"] = &AdaptiveQueryServiceProcessor::process_get;
    processMap_["batch_get"] = &AdaptiveQueryServiceProcessor::process_batch_get;
    processMap_["access"] = &AdaptiveQueryServiceProcessor::process_access;
    processMap_["batch_access"] = &AdaptiveQueryServiceProcessor::process_batch_access;
    processMap_["search"] = &AdaptiveQueryServiceProcessor::process_search;
    processMap_["count"] = &AdaptiveQueryServiceProcessor::process_count;
    processMap_["get_num_keys"] = &AdaptiveQueryServiceProcessor::process_get_num_keys;
    processMap_["remove_layer"] = &AdaptiveQueryServiceProcessor::process_remove_layer;
    processMap_["reconstruct_layer"] = &AdaptiveQueryServiceProcessor::process_reconstruct_layer;
    processMap_["storage_size"] = &AdaptiveQueryServiceProcessor::process_storage_size;
    processMap_["num_sampled_values"] = &AdaptiveQueryServiceProcessor::process_num_sampled_values;
  }

  virtual ~AdaptiveQueryServiceProcessor() {}
};

class AdaptiveQueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdaptiveQueryServiceProcessorFactory(const ::boost::shared_ptr< AdaptiveQueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdaptiveQueryServiceIfFactory > handlerFactory_;
};

class AdaptiveQueryServiceMultiface : virtual public AdaptiveQueryServiceIf {
 public:
  AdaptiveQueryServiceMultiface(std::vector<boost::shared_ptr<AdaptiveQueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdaptiveQueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdaptiveQueryServiceIf> > ifaces_;
  AdaptiveQueryServiceMultiface() {}
  void add(boost::shared_ptr<AdaptiveQueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t init(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init(id);
    }
    return ifaces_[i]->init(id);
  }

  void get(std::string& _return, const int64_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void batch_get(std::vector<std::string> & _return, const std::vector<int64_t> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch_get(_return, keys);
    }
    ifaces_[i]->batch_get(_return, keys);
    return;
  }

  void access(std::string& _return, const int64_t key, const int32_t offset, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->access(_return, key, offset, len);
    }
    ifaces_[i]->access(_return, key, offset, len);
    return;
  }

  void batch_access(std::vector<std::string> & _return, const std::vector<int64_t> & keys, const int32_t offset, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch_access(_return, keys, offset, len);
    }
    ifaces_[i]->batch_access(_return, keys, offset, len);
    return;
  }

  void search(std::set<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, query);
    }
    ifaces_[i]->search(_return, query);
    return;
  }

  int64_t count(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count(query);
    }
    return ifaces_[i]->count(query);
  }

  int32_t get_num_keys() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_num_keys();
    }
    return ifaces_[i]->get_num_keys();
  }

  int64_t remove_layer(const int32_t layer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_layer(layer_id);
    }
    return ifaces_[i]->remove_layer(layer_id);
  }

  int64_t reconstruct_layer(const int32_t layer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reconstruct_layer(layer_id);
    }
    return ifaces_[i]->reconstruct_layer(layer_id);
  }

  int64_t storage_size() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storage_size();
    }
    return ifaces_[i]->storage_size();
  }

  int64_t num_sampled_values() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_sampled_values();
    }
    return ifaces_[i]->num_sampled_values();
  }

};



#endif
